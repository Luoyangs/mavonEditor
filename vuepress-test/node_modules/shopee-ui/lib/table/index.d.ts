import { VNode } from 'vue';
import { ShopeeUIComponent, ShopeePopperPlacement } from '../../types/common'

type ShopeeTableSelectionStatus = 'empty' | 'all' | 'part'
type ShopeeTableColumnFixed = 'left' | 'right'
type ShopeeTableColumnAlign = 'left' | 'right' | 'center'
type ShopeeTableColumnValign = 'top' | 'middle' | 'bottom' | 'baseline'
type ShopeeTableColumnType = 'selection' | 'expand' | 'expand-tree'

export class Table extends ShopeeUIComponent {
  // the data of table
  data: Array<Record<string, unknown>>

  // the max height of table, when content height is higher than table height, the table header will be fixed
  height: number

  // whether to show the header
  showHeader: boolean

  // whether table has vertical border
  border: boolean

  // whether table is striped
  stripe: boolean

  // vertical alignment of table body cell
  valign: ShopeeTableColumnValign

  // selected rows of table with row-key value of rows
  selectedRows: number[]

  // the function return selection strtus of table
  selectionStatusMethod: (selectedRows: number[], data: Array<Record<string, unknown>>) => ShopeeTableSelectionStatus

  // the function return whether the row is disabled
  rowDisabled: (row: Record<string, unknown>, rowIndex: number) => boolean

  // whether the header is sticky
  stickyHeader: boolean

  // sticky offset from the sticky container
  stickyOffset: number | {
    top?: number
    bottom?: number
    left?: number
    right?: number
  }

  // whether scroll bar is sticky
  scrollBarSticky: boolean

  // key of row data, used for optimizing rendering, default value is index in data
  rowKey: string | ((row: Record<string, unknown>, rowIndex: number) => string)

  // the function returns custom class names for a row, or a string assigning class names for every row
  rowClassName: string | ((row: Record<string, unknown>, rowIndex: number) => string)

  // displayed text when data is empty
  emptyText: string

  // clear the current sort status
  clearSort(): void
}

export class TableColumn extends Vue {
  // the label of column
  label: string

  // the field name of column
  prop: string

  // the type of column, If set to selection, the column will display checkbox
  type: ShopeeTableColumnType

  // the width of column
  width: number

  // whether column is fixed at left/right
  fixed: ShopeeTableColumnFixed

  // the description info of column
  info: string

  // whether the column is sortable
  sortable: boolean | 'custom'

  // sorting method, works when sortable is true. Should return a number, just like Array.sort
  sortMethod: (a: Record<string, unknown>, b: Record<string, unknown>) => number

  // an array of data filtering options, set the value `undefined` for `All` filtering option
  filters: Array<{ text: string, value: string | number }>

  // filtering method, works when filters is set. A row will display if one of the calls returns `true`
  filterMethod: (value: string | number, opts: {row: Record<string, unknown>, column: ShopeeTableColumn}) => boolean

  // initially selected filter value
  filteredValue: string | number

  // placement for the filter dropdown
  filterPlacement: ShopeePopperPlacement

  // alignment
  align: ShopeeTableColumnAlign

  // the function that formats cell content
  formatter: (value: unknown, opts: {row: Record<string, unknown>, column: ShopeeTableColumn, rowIndex: number, columnIndex: number}) => string | VNode

  // the function that return checkbox props, the parameter contains the data of the row
  checkboxProps: (row: Array<Record<string, unknown>>) => object

  // the function that define checkbox props in table header
  headerCheckboxProps: () => object

  // the default expanded rows in the table, available only when `type` is `expand` or `expand-tree`
  defaultExpandRows: 'all' | 'none' | unknown[] | ((value: unknown, opts: {row: Record<string, unknown>}) => boolean)

  // the prop that define children of tree Table, available when `type` is `expand-tree`
  expandTreeChildProp: string

  // whether show loading slot
  loading: boolean
}

export default Table;
