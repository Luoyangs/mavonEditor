import Vue from 'vue';
import ShopeeNumberInput from '../index';
import { createInstance, destroyInstance, createElement,dispatchKeyboardEvent } from '@/test/utils';

Vue.use(ShopeeNumberInput);

const createNumberInput = (props) => {
  props = props || {};
  return createInstance(ShopeeNumberInput, props, true);
};

describe('number-input.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });

  it('should render correct', () => {
    vm = createNumberInput({value: 1});
    expect(vm.$el.classList.contains('shopee-number-input')).to.exist;
  });

  it('size', () => {
    vm = createNumberInput({size: 'small', value: 1});
    expect(vm.$el.classList.contains('shopee-number-input--small')).to.be.true;
  });

  it('disabeld', () => {
    vm = createNumberInput({
      value: 1,
      disabled: true
    });
    expect(vm.$el.classList.contains('disabled')).to.be.true;
  });

  it('should display right when value is 0', done => {
    vm = createNumberInput({
      value: 0
    });
    setTimeout(() => {
      expect(vm.formatterValue).to.equal('0');
      done();
    });
  });

  it('should plus one when arrow-up clicked', done => {
    vm = new Vue({
      template: '<shopee-number-input v-model="value"></shopee-number-input>',
      data() {
        return {
          value: 1
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      vm.$el.querySelector('.shopee-number-input__control.up').click();
      setTimeout(() => {
        expect(vm.value).to.equal(2);
        done();
      });
    });
  });
  it('should minus one when arrow-down clicked', done => {
    vm = new Vue({
      template: '<shopee-number-input v-model="value"></shopee-number-input>',
      data() {
        return {
          value: 1
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      vm.$el.querySelector('.shopee-number-input__control.down').click();
      setTimeout(() => {
        expect(vm.value).to.equal(0);
        done();
      });
    });
  });
  it('should plus five when arrow-up clicked and step is 5', done => {
    vm = new Vue({
      template: '<shopee-number-input v-model="value" :step="step"></shopee-number-input>',
      data() {
        return {
          value: 1,
          step: 5
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      vm.$el.querySelector('.shopee-number-input__control.up').click();
      setTimeout(() => {
        expect(vm.value).to.equal(6);
        done();
      });
    });
  });
  it('step: 0.1', done => {
    vm = new Vue({
      template: '<shopee-number-input v-model="value" :step="step"></shopee-number-input>',
      data() {
        return {
          value: 1.1,
          step: 0.1
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      vm.$el.querySelector('.shopee-number-input__control.up').click();
      setTimeout(() => {
        expect(vm.value).to.equal(1.2);
        done();
      });
    });
  });
  it('should be max when value is set more than max', done => {
    vm = new Vue({
      template: '<shopee-number-input v-model="value" :max="5"></shopee-number-input>',
      data() {
        return {
          value: 10
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      expect(vm.value).to.equal(5);
      done();
    });
  });
  it('should be min when value is set less than min', done => {
    vm = new Vue({
      template: '<shopee-number-input v-model="value" :min="5"></shopee-number-input>',
      data() {
        return {
          value: 1
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      expect(vm.value).to.equal(5);
      done();
    });
  });
  it('should allow focused input value is less than min and set to min when blur', done => {
    vm = new Vue({
      template: '<shopee-number-input ref="numInput" v-model="value" :min="5"></shopee-number-input>',
      data() {
        return {
          value: 10
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      const input = vm.$refs.numInput.$refs.input;
      expect(vm.value).to.equal(10);
      input.focus();
      vm.value = 1;
      setTimeout(() => {
        expect(vm.value).to.equal(1);
        input.blur();
        setTimeout(() => {
          expect(vm.value).to.equal(5);
          done();
        });
      });
    });
  });
  it('should disabled add button when reach max', done => {
    vm = new Vue({
      template: '<shopee-number-input v-model="value" :step="step" :max="max"></shopee-number-input>',
      data() {
        return {
          value: 1,
          step: 5,
          max: 4
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      vm.$el.querySelector('.shopee-number-input__control.up').click();
      setTimeout(() => {
        expect(vm.value).to.equal(1);
        done();
      });
    });
  });
  it('should disabled minus button when reach min', done => {
    vm = new Vue({
      template: '<shopee-number-input v-model="value" :step="step" :min="min"></shopee-number-input>',
      data() {
        return {
          value: 1,
          step: 5,
          min: 0
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      vm.$el.querySelector('.shopee-number-input__control.down').click();
      setTimeout(() => {
        expect(vm.value).to.equal(1);
        done();
      });
    });
  });
  it('should call change callback when value changed', done => {
    let isChanged = false;
    vm = new Vue({
      template: '<shopee-number-input v-model="value" @change="onChange()"></shopee-number-input>',
      data() {
        return {
          value: 1
        };
      },
      methods: {
        onChange() {
          isChanged = true;
        }
      }
    }).$mount(createElement());
    setTimeout(() => {
      vm.$el.querySelector('.shopee-number-input__control.down').click();
      setTimeout(() => {
        expect(isChanged).to.true;
        done();
      });
    });
  });
  it('should format value with the precision', done => {
    vm = new Vue({
      template: '<shopee-number-input v-model="value" :precision="precision"></shopee-number-input>',
      data() {
        return {
          value: 1,
          precision: 2
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      expect(vm.value).to.equal(1.00);
      done();
    });
  });
  it('should format value with the precision: decimal', done => {
    vm = new Vue({
      template: '<shopee-number-input v-model="value" :precision="precision"></shopee-number-input>',
      data() {
        return {
          value: 1.234,
          precision: 2
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      expect(vm.value).to.equal(1.23);
      done();
    });
  });

  it('should render correct', () => {
    vm = createNumberInput({
      value: 1,
      parser(val) {
        return val + 1;
      },
      formatter(val) {
        return val + '';
      }
    });
    vm.handleInput(1);
    expect(vm.currentValue).to.equal(2);
  });

  it('should handleEnter correct', (done) => {
    vm = createNumberInput({
      value: 1
    });
    dispatchKeyboardEvent(vm.$refs.input.$el.querySelector('.shopee-input__input'), 13);
    setTimeout(() => {
      expect(vm.currentValue).to.equal('');
      done();
    });
  });

  it('should focus&blur correct', () => {
    vm = createNumberInput({
      value: 1
    });
    vm.focus();
    expect(document.activeElement === vm.$refs.input.$refs.input).to.be.true;
    vm.blur();
    expect(document.activeElement === vm.$refs.input.$refs.input).to.be.false;
  });
});

