import { isValidDate } from 'shopee-ui/lib/base';

const MONTHS = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];
const WEEKS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];

/**
 * get last month of the given month
 * @param  {Number} year  the year of month
 * @param  {Number} month the given month
 * @return {Object} last month of the given month
 */
const lastMonth = (year, month) => {
  if (month === 0) {
    return {
      year: year - 1,
      month: 11
    };
  } else {
    return {
      year: year,
      month: month - 1
    };
  }
};

/**
 * get next month of the given month
 * @param  {Number} year  the year of month
 * @param  {Number} month the given month
 * @return {Object} next month of the given month
 */
const nextMonth = (year, month) => {
  if (month === 11) {
    return {
      year: year + 1,
      month: 0
    };
  } else {
    return {
      year: year,
      month: month + 1
    };
  }
};

/**
 * whether the given year is a leap year
 * @param  {Number}  year the given year
 * @return {Boolean} whether the given year is a leap year
 */
const isLeap = year => {
  if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
    return true;
  } else {
    return false;
  }
};

/**
 * get the amount of days in the given month
 * @param  {Number} year  the year of month
 * @param  {Number} month the given month
 * @return {Number} the amount of days in the given month
 */
const getMaxDayOfMonth = (year, month) => {
  month++;
  switch (month) {
    case 1:
    case 3:
    case 5:
    case 7:
    case 8:
    case 10:
    case 12:
      return 31;
    case 4:
    case 6:
    case 9:
    case 11:
      return 30;
    case 2:
      if (isLeap(year)) {
        return 29;
      } else {
        return 28;
      }
  }
};

/**
 * get the first day of the given month
 * @param  {Number} year  the year of month
 * @param  {Number} month the given month
 * @return {Number} the first day of the given month
 */
const getFirstDayOfMonth = (year, month) => {
  const date = new Date(year, month, 1);
  return date.getDay();
};

const MILLISECONDS_PER_DAY = 86400000;

/**
 * get the first date of the given month in the calendar
 * @param  {Number} year  the year of month
 * @param  {Number} month the given month
 * @return {Date} the first date of the given month in the calendar
 */
const getStartDateOfCalendar = (year, month, startOfWeek = 7) => {
  const result = new Date(year, month, 1);
  const day = result.getDay();
  result.setTime(result.getTime() - MILLISECONDS_PER_DAY * ((day - startOfWeek + 7) % 7));
  return result;
};

/**
 * whether the given dates is the same day
 * @param  {Date}  one the given date
 * @param  {Date}  two the given date
 * @return {Boolean} whether the given dates is the same day
 */
const isSameDay = (one, two) => {
  if (!one || !two) {
    return false;
  }
  return compareDate(one, two) === 0;
};

/**
 * whether the given dates is the same with any day in days
 * @param  {Date}  one the given date
 * @param  {Array<Date>}  days the given days array
 * @return {Boolean} whether the given dates is the same day
 */
const isSameDays = (one, days) => {
  if (!one || !days) {
    return false;
  }
  return days.some(day => isSameDay(one, day));
};

/**
 * whether the given date is today
 * @param  {Date}  date the given date
 * @return {Boolean} whether the given date is today
 */
const isToday = date => {
  const now = new Date();
  return isSameDay(date, now);
};

/**
 * whether the given date is in the range of start and end
 * @param  {Date}  date  the given date
 * @param  {Date}  start the start date of range
 * @param  {Date}  end   the end date of range
 * @return {Boolean} whether the given date is in the range of start and end
 */
const isDateInRange = (date, start, end, include = false) => {
  if (!start || !end) {
    return false;
  }
  if (start > end) {
    const tmp = start;
    start = end;
    end = tmp;
  }
  return include ?
    compareDate(start, date) <= 0 && compareDate(end, date) >= 0 :
    compareDate(start, date) < 0 && compareDate(end, date) > 0;
};

/**
 * compare two months
 * @param  {Object} one the first month
 * @param  {Object} two the second month
 * @return {Number} if one is equal to twn, return 0;if one is later than two, return 1;else return -1;
 */
const compareMonth = (one, two) => {
  if (one.year === two.year) {
    if (one.month === two.month) {
      return 0;
    }
    return one.month > two.month ? 1 : -1;
  }
  return one.year > two.year ? 1 : -1;
};

/**
 * compare two dates
 * @param {Date} one the first date
 * @param {Date} two  the second date
 * @return {Number } if one is equal to twn, return 0;if one is later than two, return 1;else return -1;
 */
const compareDate = (one, two) => {
  const oneYear = one.getFullYear();
  const oneMonth = one.getMonth();
  const oneDate = one.getDate();
  const twoYear = two.getFullYear();
  const twoMonth = two.getMonth();
  const twoDate = two.getDate();
  if (oneYear === twoYear) {
    if (oneMonth === twoMonth) {
      if (oneDate === twoDate) {
        return 0;
      }
      return oneDate > twoDate ? 1 : -1;
    }
    return oneMonth > twoMonth ? 1 : -1;
  }
  return oneYear > twoYear ? 1 : -1;
};

/**
 * get year range by year
 * @param  {Number} year the given year
 * @return {Object} the year range
 */
const getYearRange = year => {
  year = year || new Date().getFullYear();
  const start = Math.floor(year / 10) * 10;
  return {
    start: start,
    end: start + 9
  };
};

/**
 * get the week range of given date
 * @param {Date} date the date
 * @return {Object} the week range
 */
const getWeekByDate = (date = new Date(), startOfWeek = 0) => {
  const dayOfDate = (7 - (startOfWeek - date.getDay())) % 7;
  const start = new Date(date.getTime() - dayOfDate * MILLISECONDS_PER_DAY);
  const end = new Date(start.getTime() + 6 * MILLISECONDS_PER_DAY);
  return {
    startDate: getStartOfDate(start),
    endDate: getEndOfDate(end)
  };
};

/**
 * get the start time of a day
 * @param {Date} date the date
 */
const getStartOfDate = date => {
  date.setHours(0);
  date.setMinutes(0);
  date.setSeconds(0);
  date.setMilliseconds(0);
  return date;
};

/**
 * get the end time of a day
 * @param {Date} date the date
 */
const getEndOfDate = date => {
  date.setHours(23);
  date.setMinutes(59);
  date.setSeconds(59);
  date.setMilliseconds(999);
  return date;
};

export {
  isValidDate,
  lastMonth,
  nextMonth,
  getMaxDayOfMonth,
  getFirstDayOfMonth,
  getStartDateOfCalendar,
  isToday,
  isSameDay,
  isSameDays,
  compareMonth,
  compareDate,
  isDateInRange,
  getYearRange,
  getWeekByDate,
  getStartOfDate,
  getEndOfDate,
  MONTHS,
  WEEKS
};
