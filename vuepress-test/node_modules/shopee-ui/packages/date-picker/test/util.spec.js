import * as Util from '../src/utils/util.js';

describe('utils/util.js', () => {
  describe('lastMonth', () => {
    it('last month of 2017.7 is 2017.6', () => {
      const year = 2017;
      const month = 7;
      const lastMonth = Util.lastMonth(year, month);
      expect(lastMonth.year).to.equal(2017);
      expect(lastMonth.month).to.equal(6);
    });
    it('last month of 2017.1 is 2016.12', () => {
      const year = 2017;
      const month = 0;
      const lastMonth = Util.lastMonth(year, month);
      expect(lastMonth.year).to.equal(2016);
      expect(lastMonth.month).to.equal(11);
    });
  });

  describe('nextMonth', () => {
    it('next month of 2017.7 is 2017.8', () => {
      const year = 2017;
      const month = 7;
      const nextMonth = Util.nextMonth(year, month);
      expect(nextMonth.year).to.equal(2017);
      expect(nextMonth.month).to.equal(8);
    });
    it('next month of 2017.12 is 2018.1', () => {
      const year = 2017;
      const month = 11;
      const nextMonth = Util.nextMonth(year, month);
      expect(nextMonth.year).to.equal(2018);
      expect(nextMonth.month).to.equal(0);
    });
  });

  describe('getMaxDayOfMonth', () => {
    it('max day of 2017.9 is 30', () => {
      expect(Util.getMaxDayOfMonth(2017, 8)).to.equal(30);
    });

    it('max day of 2017.8 is 31', () => {
      expect(Util.getMaxDayOfMonth(2017, 7)).to.equal(31);
    });

    it('max day of 2017.2 is 28', () => {
      expect(Util.getMaxDayOfMonth(2017, 1)).to.equal(28);
    });

    it('max day of 2016.2 is 29', () => {
      expect(Util.getMaxDayOfMonth(2016, 1)).to.equal(29);
    });
  });

  describe('getFirstDayOfMonth', () => {
    it('first day of 2017.8 is Tuesday', () => {
      expect(Util.getFirstDayOfMonth(2017, 7)).to.equal(2);
    });
  });

  describe('getStartDateOfCalendar', () => {
    it('start date of 2017.8 is 2017.7.30', () => {
      const startDateOfCalendar = Util.getStartDateOfCalendar(2017, 7);
      expect(startDateOfCalendar.getFullYear()).to.equal(2017);
      expect(startDateOfCalendar.getMonth()).to.equal(6);
      expect(startDateOfCalendar.getDate()).to.equal(30);
    });
    it('start date of 2017.1 is 20171.1', () => {
      const startDateOfCalendar = Util.getStartDateOfCalendar(2017, 0);
      expect(startDateOfCalendar.getFullYear()).to.equal(2017);
      expect(startDateOfCalendar.getMonth()).to.equal(0);
      expect(startDateOfCalendar.getDate()).to.equal(1);
    });
  });

  describe('isSameDay', () => {
    it('two new Date() should be the same day', () => {
      expect(Util.isSameDay(new Date(), new Date())).to.be.true;
      expect(Util.isSameDay(new Date(), new Date(new Date(2016, 1, 1).getTime()))).to.be.false;
    });
    it('should return false if the parameters are undefined', () => {
      expect(Util.isSameDay(new Date())).to.be.false;
    });
  });

  describe('isSameDays', () => {
    it('should return true if is same day with any of parameters', () => {
      expect(Util.isSameDays(new Date(2017, 7, 1), [new Date(2017, 7, 1), new Date(2017, 8, 1)])).to.be.true;
    });
    it('should return false if the parameters are undefined', () => {
      expect(Util.isSameDays(new Date())).to.be.false;
    });
  });

  describe('isToday', () => {
    it('new Date() is today', () => {
      expect(Util.isToday(new Date())).to.be.true;
    });
  });

  describe('isDateInRange', () => {
    it('2017.8.1 is between 2017.7.1 and 2017.9.1', () => {
      expect(Util.isDateInRange(new Date(2017, 7, 1), new Date(2017, 6, 1), new Date(2017, 8, 1))).to.be.true;
    });
    it('2017.7.1 is not between 2017.8.1 and 2017.9.1', () => {
      expect(Util.isDateInRange(new Date(2017, 6, 1), new Date(2017, 7, 1), new Date(2017, 8, 1))).to.be.false;
    });
    it('should return false if endDate is undefined', () => {
      expect(Util.isDateInRange(new Date(), new Date(new Date().getTime() - 1000))).to.be.false;
    });
  });

  describe('compareMonth', () => {
    it('2017.1 is later than 2016.12', () => {
      expect(Util.compareMonth({year: 2017, month: 1}, {year: 2016, month: 12})).to.equal(1);
    });

    it('2017.1 is equal to 2017.1', () => {
      expect(Util.compareMonth({year: 2017, momth: 1}, {year: 2017, momth: 1})).to.equal(0);
    });

    it('2017.7 is later to 2017.1', () => {
      expect(Util.compareMonth({year: 2017, month: 7}, {year: 2017, month: 1})).to.equal(1);
    });
  });

  describe('compareDate', () => {
    it('2017.1.1 is later than 2016.12.1', () => {
      expect(Util.compareDate(new Date(2017, 0, 1), new Date(2016, 11, 1))).to.equal(1);
    });

    it('2017.2.2 is later to 2017.1.1', () => {
      expect(Util.compareDate(new Date(2017, 1, 2), new Date(2017, 0, 1))).to.equal(1);
    });

    it('2017.1.2 is later to 2017.1.1', () => {
      expect(Util.compareDate(new Date(2017, 0, 2), new Date(2017, 0, 1))).to.equal(1);
    });

    it('2017.1.1 is equal to 2017.1.1', () => {
      expect(Util.compareDate(new Date(2017, 0, 1), new Date(2017, 0, 1))).to.equal(0);
    });
  });

  describe('getYearRange', () => {
    it('the year range of 2017 is 2010 and 2019', () => {
      expect(Util.getYearRange(2017).start).to.equal(2010);
      expect(Util.getYearRange(2017).end).to.equal(2019);
    });
  });

  describe('getWeekByDate', () => {
    it('should return correct result when startOfWeek is 0', () => {
      const range = Util.getWeekByDate(new Date(2018, 5, 19));
      expect(range.startDate.getDate()).to.equal(17);
      expect(range.endDate.getDate()).to.equal(23);
    });
    it('should return correct result when startOfWeek is 1', () => {
      const range = Util.getWeekByDate(new Date(2018, 5, 19), 1);
      expect(range.startDate.getDate()).to.equal(18);
      expect(range.endDate.getDate()).to.equal(24);
    });
    it('should return correct result when startOfWeek is 2', () => {
      const range = Util.getWeekByDate(new Date(2018, 5, 19), 2);
      expect(range.startDate.getDate()).to.equal(19);
      expect(range.endDate.getDate()).to.equal(25);
    });
    it('should return correct result when startOfWeek is 3', () => {
      const range = Util.getWeekByDate(new Date(2018, 5, 19), 3);
      expect(range.startDate.getDate()).to.equal(13);
      expect(range.endDate.getDate()).to.equal(19);
    });
    it('should return correct result when startOfWeek is 4', () => {
      const range = Util.getWeekByDate(new Date(2018, 5, 19), 4);
      expect(range.startDate.getDate()).to.equal(14);
      expect(range.endDate.getDate()).to.equal(20);
    });
    it('should return correct result when startOfWeek is 5', () => {
      const range = Util.getWeekByDate(new Date(2018, 5, 19), 5);
      expect(range.startDate.getDate()).to.equal(15);
      expect(range.endDate.getDate()).to.equal(21);
    });
    it('should return correct result when startOfWeek is 6', () => {
      const range = Util.getWeekByDate(new Date(2018, 5, 19), 6);
      expect(range.startDate.getDate()).to.equal(16);
      expect(range.endDate.getDate()).to.equal(22);
    });
  });

  describe('getStartOfDate', () => {
    it('should return correct result', () => {
      const date = new Date(2017, 7, 1, 11, 0, 1);
      const satrtOfDate = Util.getStartOfDate(date);
      expect(satrtOfDate.getHours()).to.equal(0);
      expect(satrtOfDate.getMinutes()).to.equal(0);
      expect(satrtOfDate.getSeconds()).to.equal(0);
      expect(satrtOfDate.getMilliseconds()).to.equal(0);
    });
  });

  describe('getEndOfDate', () => {
    it('should return correct result', () => {
      const date = new Date(2017, 7, 1, 11, 0, 1);
      const endOfDate = Util.getEndOfDate(date);
      expect(endOfDate.getHours()).to.equal(23);
      expect(endOfDate.getMinutes()).to.equal(59);
      expect(endOfDate.getSeconds()).to.equal(59);
      expect(endOfDate.getMilliseconds()).to.equal(999);
    });
  });
});
