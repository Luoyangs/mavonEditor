/**
 * get children of current selected options
 */
export const getChildrenOfCurrentSelected = (options, selected) => {
  let length = selected.length;
  for (let i = 0; i < length; i++) {
    let current = selected[i];
    let currentOption = options.filter(option => {
      return option.value === current;
    })[0];
    if (!currentOption || !currentOption.children || currentOption.children.length === 0) {
      return [];
    }
    options = currentOption.children;
  }
  return options;
};

export const isSelectFinished = (options, selected) => {
  return getChildrenOfCurrentSelected(options, selected).length === 0;
};

export const getOptionsByValue = (options = [], selected = []) => {
  return selected.map(value => {
    let currentOption = options.filter(option => {
      return option.value === value;
    })[0];
    options = (currentOption && currentOption.children) ? currentOption.children : [];
    return currentOption;
  });
};

/**
 * get current actived option
 */
export const getOptionByIndex = (options = [], selected = [], hoverLevel, hoverIndex) => {
  let selectedPath = [];
  for (let i = 0; i < hoverLevel; i++) {
    selectedPath.push(selected[i]);
  }
  return getChildrenOfCurrentSelected(options, selectedPath)[hoverIndex];
};

/**
 *  get hover index by selected option and hover level
 */
export const getHoverIndexByOption = (options = [], selected = [], hoverLevel) => {
  let option = selected[hoverLevel];
  for (let i = 0; i < hoverLevel; i++) {
    let current = selected[i];
    let currentOption = options.filter(option => {
      return option.value === current;
    })[0];
    if (!currentOption || !currentOption.children || currentOption.children.length === 0) {
      return -1;
    }
    options = currentOption.children;
  }
  for (let i = 0; i < options.length; i++) {
    if (options[i].value === option) {
      return i;
    }
  }
  return -1;
};

export const isOptionDisabled = option => {
  return !!option.disabled ||
    (option.children && option.children.length > 0 && option.children.reduce((accumulator, option) => accumulator && isOptionDisabled(option), true));
};

export const getOptionsMaxLevel = (options = []) => {
  let maxLevel = 1;
  let maxChilrenLevel = 0;
  for (let i = 0;i < options.length;i++) {
    const currentOption = options[i];
    if (!currentOption || !currentOption.children || currentOption.children.length === 0) {
      continue;
    }
    maxChilrenLevel = Math.max(maxChilrenLevel, getOptionsMaxLevel(currentOption.children));
  }
  return maxLevel + maxChilrenLevel;
};
