import { isOptionDisabled } from '../utils/helper';

export default {
  props: {
    value: Array,
    options: Array,
    changeOnSelect: Boolean,
  },
  data() {
    return {
      currentSelected: this.value.slice() || []
    };
  },
  computed: {
    lists() {
      let lists = [];
      let options = this.options;
      let currentLevel = 0;
      lists.push(options.map((option, index) => ({
        label: option.label,
        value: option.value,
        active: currentLevel === this.hoverLevel && index === this.hoverIndex,
        disabled: isOptionDisabled(option),
        children: option.children
      })));
      this.currentSelected.forEach(value => {
        let currentOption = options.filter(option => {
          return option.value === value;
        })[0];
        let children = (currentOption && currentOption.children) ? currentOption.children : [];
        if (!children || children.length === 0) {
          return;
        }
        options = children;
        currentLevel++;
        lists.push(children.map((option, index) => ({
          label: option.label,
          value: option.value,
          active: currentLevel === this.hoverLevel && index === this.hoverIndex,
          disabled: isOptionDisabled(option),
          children: option.children
        })));
      });
      return lists;
    }
  },
  watch: {
    value(val) {
      this.currentSelected = val.map(item => item) || [];
    }
  },
  methods: {
    emit(value) {
      this.$emit('input', value);
      // emit only when value changed
      if (!this.compareArray(value, this.value)) {
        this.$emit('change', value);
        this.dispatch('ShopeeFormItem', 'field-change', value);
      }
    },
    compareArray(array1, array2) {
      return array1.length === array2.length && array1.every((item, index) => item === array2[index]);
    }
  }
};
