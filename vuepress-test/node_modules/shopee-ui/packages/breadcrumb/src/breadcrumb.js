import ShopeeBreadcrumbItem from './breadcrumb-item.js';

export default {
  name: 'ShopeeBreadcrumb',
  components: {
    ShopeeBreadcrumbItem
  },
  props: {
    separator: String,
    separatorIcon: String,
    // light, dark
    theme: {
      type: String,
      default: 'light'
    },
    maxNode: {
      type: Number,
      default: 4
    }
  },
  data() {
    return {
      prefixClass: 'shopee-breadcrumb',
      ellipsisClass: 'ellipsis',
    };
  },
  methods: {
    isEmptyElement(c) {
      return !(c.tag || (c.text && c.text.trim() !== ''));
    },
    filterEmpty(children = []) {
      return children.filter(c => !this.isEmptyElement(c));
    },
    handleEllipsisChange(val) {
      this.$emit('change-ellipsis', val);
    }
  },
  render() {
    const children = this.filterEmpty(this.$slots.default);
    const itemList = this.$slots.default.filter(node => node.componentOptions && node.componentOptions.tag === 'shopee-breadcrumb-item');
    const length = itemList.length;
    if (length !== children.length) {
      console.warn('[ShopeeUI warn][Breadcrumb]: Breadcrumb only accepts Breadcrumb-item as it\'s children');
    }
    if (length <= this.maxNode) {
      return (
        <div class={[this.prefixClass, this.prefixClass + '--' + this.theme]}>
          {this.$slots.default}
        </div>
      );
    } else {
      const childrenItems = [];
      const ellipsisItems = [];
      const breakpointer = length - this.maxNode + 1;
      children.forEach((node, index) => {
        if (index && index === breakpointer) {
          ellipsisItems.push(node);
          const ellipseProps = {
            props: {
              ellipsis: true
            },
            on: {
              'change-ellipsis': this.handleEllipsisChange,
            }
          };
          const ellipseNode = (
            <ShopeeBreadcrumbItem {...ellipseProps}>
              <template slot="ellipsis">
                <div class={[this.prefixClass, this.prefixClass + '--' + this.theme, this.prefixClass + '--' + this.ellipsisClass]}>
                  {ellipsisItems}
                </div>
              </template>
            </ShopeeBreadcrumbItem>
          );
          childrenItems.push(ellipseNode);
        } else if (!index || index > breakpointer) {
          childrenItems.push(node);
        } else {
          ellipsisItems.push(node);
        }
      });
      return (
        <div class={[this.prefixClass, this.prefixClass + '--' + this.theme]}>
          { childrenItems }
        </div>
      );
    }
  }
};
