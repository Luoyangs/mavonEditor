import { Icon as ShopeeIcon } from 'shopee-ui/lib/icon';
import { ShopeeClickoutside } from 'shopee-ui/lib/base';
import { Popper as ShopeePopper } from 'shopee-ui/lib/popper';
import arrowRightIcon from '@shopee-ui/icon/svg/arrow-right.svg';
import moreIcon from '@shopee-ui/icon/svg/more-s.svg';

const DEFAULTICON = arrowRightIcon;

export default {
  name: 'ShopeeBreadcrumbItem',
  directives: {ShopeeClickoutside},
  components: {
    ShopeeIcon,
    ShopeePopper
  },
  props: {
    to: [Object, String],
    replace: Boolean,
    ellipsis: {
      type: Boolean,
      default: false
    }
  },
  data() {
    return {
      prefixClass: 'shopee-breadcrumb-item',
      visible: false,
      placement: 'bottom-start'
    };
  },
  computed: {
    breadcrumb() {
      let parent = this.$parent;
      while (parent && parent.$options.name !== 'ShopeeBreadcrumb') {
        parent = parent.$parent;
      }
      return parent;
    },
    separator() {
      return this.breadcrumb.separator;
    },
    separatorIcon() {
      let icon = this.breadcrumb.separatorIcon;
      if (!icon && !this.separator) {
        icon = DEFAULTICON;
      }
      return icon;
    }
  },
  mounted() {
    this.$refs.link && this.$refs.link.addEventListener('click', this.onLinkClick);
    this.$refs.popperRef && this.$refs.popperRef.addEventListener('click', this.onEllipsisClick);
  },
  beforeDestroy() {
    this.$refs.link && this.$refs.link.removeEventListener('click', this.onLinkClick);
    this.$refs.popperRef && this.$refs.popperRef.removeEventListener('click', this.onEllipsisClick);
  },
  methods: {
    onLinkClick($event) {
      const { to, $router } = this;
      this.$emit('item-click',$event);
      if (!to || !$router) {
        return;
      }
      this.replace ? $router.replace(to) : $router.push(to);
    },
    onEllipsisClick() {
      this.visible = !this.visible;
      this.$emit('change-ellipsis', this.visible);
    },
    handleClickoutside() {
      if (this.visible) {
        this.visible = false;
        this.$emit('change-ellipsis', this.visible);
      }
    }

  },
  render() {
    let separator;
    let content = this.$slots.default;
    if (this.ellipsis) {
      content = (
        <shopee-icon svg={moreIcon}></shopee-icon>
      );
    }
    if (this.separatorIcon) {
      separator = (
        <div class={[this.prefixClass + '__separator']}>
          <shopee-icon svg={this.separatorIcon}></shopee-icon>
        </div>
      );
    } else {
      separator = (
        <div class={[this.prefixClass + '__separator']}>{this.separator}</div>
      );
    }
    if (this.ellipsis) {
      const directives = [
        {
          name: 'ShopeeClickoutside',
          value: this.handleClickoutside
        }
      ];
      return (
        <div class={[this.prefixClass]} {...{directives}}>
          <div
            class={[this.prefixClass + '__inner', this.prefixClass + '__more', this.to ? this.prefixClass + '__link' : '']}
            ref="popperRef">
            {content}
          </div>
          <shopeePopper
            ref="popper"
            visible={this.visible}
            placement={this.placement}
            transition-name="zoom-fast">
            <div class="ellipsis">
              { this.$slots.ellipsis }
            </div>
          </shopeePopper>
          {separator}
        </div>
      );
    } else {
      return (
        <div class={[this.prefixClass]}>
          <div
            class={[this.prefixClass + '__inner', this.to ? this.prefixClass + '__link' : '']}
            ref="link">
            {content}
          </div>
          {separator}
        </div>
      );
    }
  }
};
