import Vue from 'vue';
import ShopeeTooltip from '../index';
import { createInstance, destroyInstance } from '@/test/utils';

Vue.use(ShopeeTooltip);

const createTooltip = options => {
  return createInstance(ShopeeTooltip, Object.assign({
    delay: 0,
    content: 'tooltip'
  }, options));
};

describe('tooltip.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });

  it('should render correct', () => {
    vm = createTooltip();
    expect(vm.$el.classList.contains('shopee-tooltip')).to.be.true;
  });

  it('should show when mouseenter', done => {
    vm = createTooltip({
      delay: 500
    });
    const popover = vm.$refs.popover;
    popover.$refs.popperRef.dispatchEvent(new Event('mouseenter'));
    setTimeout(() => {
      expect(popover.$refs.popper.$el.style.display).to.equals('');
      done();
    }, 500);
  });

  it('should hide when mouseleave', done => {
    vm = createTooltip({
      delay: 500
    });
    const popover = vm.$refs.popover;
    popover.$refs.popperRef.dispatchEvent(new Event('mouseenter'));
    setTimeout(() => {
      popover.$refs.popperRef.dispatchEvent(new Event('mouseleave'));
      setTimeout(() => {
        expect(popover.$refs.popper.$el.style.display).to.equals('none');
        done();
      }, 450);
    }, 500);
  });

  it('should show when clicked', done => {
    vm = createTooltip({
      trigger: 'click'
    });
    const popover = vm.$refs.popover;
    popover.$refs.popperRef.click();
    setTimeout(() => {
      expect(popover.$refs.popper.$el.style.display).to.equals('');
      done();
    }, 200);
  });

  it('should hide when clicked outside', done => {
    vm = createTooltip({
      trigger: 'click'
    });
    const popover = vm.$refs.popover;
    popover.$refs.popperRef.click();
    setTimeout(() => {
      document.body.click();
      setTimeout(() => {
        expect(popover.$refs.popper.$el.style.display).to.equals('none');
        done();
      }, 450);
    }, 200);
  });

  it('should hide when hideOnClick is true', done => {
    vm = createTooltip({
      trigger: 'click',
      hideOnClick: true
    });
    const popover = vm.$refs.popover;
    popover.$refs.popperRef.click();
    setTimeout(() => {
      expect(popover.$refs.popper.$el.style.display).to.equals('');
      popover.$refs.popperRef.click();
      setTimeout(() => {
        expect(popover.$refs.popper.$el.style.display).to.equals('none');
        done();
      }, 450);
    }, 200);
  });

  it('should toggle visible when value changed', done => {
    vm = createTooltip();
    vm.value = true;
    const popover = vm.$refs.popover;
    setTimeout(() => {
      expect(popover.$refs.popper.$el.style.display).to.equals('');
      vm.value = false;
      setTimeout(() => {
        expect(popover.$refs.popper.$el.style.display).to.equals('none');
        done();
      }, 450);
    }, 200);
  });

  it('should disabled mouseleave and mouseenter when value set', done => {
    vm = createTooltip();
    vm.value = true;
    const popover = vm.$refs.popover;
    popover.$refs.popperRef.dispatchEvent(new Event('mouseenter'));
    setTimeout(() => {
      popover.$refs.popperRef.dispatchEvent(new Event('mouseleave'));
      setTimeout(() => {
        expect(popover.$refs.popper.$el.style.display).to.equals('');
        done();
      }, 200);
    }, 200);
  });

  it('should not hide on click outside when value set', done => {
    vm = createTooltip({
      trigger: 'click'
    });
    vm.value = true;
    const popover = vm.$refs.popover;
    popover.$refs.popperRef.click();
    setTimeout(() => {
      document.body.click();
      setTimeout(() => {
        expect(popover.$refs.popper.$el.style.display).to.equals('');
        done();
      }, 200);
    }, 200);
  });
});
