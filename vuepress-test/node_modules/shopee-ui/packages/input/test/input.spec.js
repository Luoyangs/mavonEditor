import Vue from 'vue';
import ShopeeInput from '../index';
import { createInstance, destroyInstance, createElement, triggerSVGClick } from '@/test/utils';

Vue.use(ShopeeInput);

const createInput = (props) => {
  return new Vue({
    template: `<div>
                <shopee-input ref="input" v-bind="props"></shopee-input>
              </div>`,
    data() {
      return {
        props
      };
    }
  }).$mount(createElement());
};

describe('input.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });
  it('should render a input', () => {
    vm = createInstance(ShopeeInput);
    expect(vm.$el.classList.contains('shopee-input')).to.be.true;
  });
  it('disabled', () => {
    vm = createInstance(ShopeeInput, {disabled: true});
    expect(vm.$el.querySelector('.shopee-input__inner').classList.contains('disabled')).to.be.true;
  });
  it('Unicode length', () => {
    vm = createInput({
      unicodeNormalized: true,
      value: '☁️💙 𝗙𝗹𝘂𝗳𝗳𝘆 𝗕𝗮𝗴 💙☁️',
    });
    const input = vm.$refs.input;
    expect(input.textLength).to.equal(18);
  });
  it('maxlength', () => {
    vm = createInput({
      unicodeNormalized: true,
      value: '☁️💙 𝗙𝗹𝘂𝗳𝗳𝘆 𝗕𝗮𝗴 💙☁️',
      maxlength: 10,
    });
    const input = vm.$refs.input;
    expect(input.textLength).to.equal(10);
  });
  it('render type numeric', (done) => {
    vm = new Vue({
      template: '<shopee-input v-model="value" :precision="3" type="numeric"></shopee-input>',
      data() {
        return {
          value: 123.3345
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      setTimeout(() => {
        expect(vm.value).to.equal('123.334');
        done();
      });
    });
  });
  it('render type numeric isRound', (done) => {
    vm = new Vue({
      template: '<shopee-input v-model="value" :precision="3" :is-round="isRound" type="numeric"></shopee-input>',
      data() {
        return {
          value: 123.3345,
          isRound: true
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      setTimeout(() => {
        expect(vm.value).to.equal('123.335');
        done();
      });
    });
  });
  it('render type numeric with max, min and precision', (done) => {
    vm = new Vue({
      template: '<shopee-input v-model="value" :precision="2" type="numeric" :min="min" :max="max"></shopee-input>',
      data() {
        return {
          value: 123.3345,
          min: 20,
          max: 100
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      expect(vm.value).to.equal('100.00');

      vm.value = '';
      setTimeout(() => {
        expect(vm.value).to.equal('20.00');
        done();
      });
    });
  });
  it('error', () => {
    vm = createInstance(ShopeeInput, {error: true});
    expect(vm.$el.querySelector('.shopee-input__inner').classList.contains('error')).to.be.true;
  });
  it('size', () => {
    vm = createInstance(ShopeeInput, {size: 'small'});
    expect(vm.$el.querySelector('.shopee-input__inner').classList.contains('shopee-input__inner--small')).to.be.true;
  });
  it('clearable', done => {
    vm = createInstance(ShopeeInput, {clearable: true});
    triggerSVGClick(vm.$el.querySelector('.shopee-input__clear-btn'));
    setTimeout(() => {
      expect(vm.value).to.equal('');
      done();
    });
  });

  it('clear with lazy', done => {
    vm = new Vue({
      template: '<shopee-input v-model="value" lazy clearable></shopee-input>',
      data() {
        return {
          value: 123.3345,
        };
      }
    }).$mount(createElement());
    triggerSVGClick(vm.$el.querySelector('.shopee-input__clear-btn'));
    setTimeout(() => {
      expect(vm.value).to.equal('');
      done();
    });
  });
  it('focus', done => {
    let hasFocus = false;
    vm = new Vue({
      template: '<shopee-input @focus="onFocus()"></shopee-input>',
      methods: {
        onFocus() {
          hasFocus = true;
        }
      }
    }).$mount(createElement());
    vm.$el.querySelector('input').focus();
    setTimeout(() => {
      expect(hasFocus).to.be.true;
      done();
    });
  });
  it('should set computed data correct', () => {
    vm = createInstance(ShopeeInput);
    expect(vm.textareaStyle).to.eql({
      resize: 'vertical'
    });
    expect(vm.textLength).to.equal(0);
  });

  it('should set watch data correct', (done) => {
    vm = createInput({
      value: 'test'
    });
    const input = vm.$refs.input;
    expect(input.currentValue).to.equal('test');
    vm.props.value = 'test2';
    setTimeout(() => {
      expect(input.currentValue).to.equal('test2');
      done();
    });
  });

  it('should handle input correct', () => {
    vm = createInput({
      value: 'test',
      restriction: /(\w)*/i
    });
    let input = vm.$refs.input;
    let inputDom = input.$refs.input;
    inputDom.dispatchEvent(new Event('input'));
    expect(input.currentValue).to.equal('test');
    vm.$destroy();
    vm = createInput({
      value: 'test',
      'restriction-type': 'value',
      restriction: /^(\d)+$/i
    });
    input = vm.$refs.input;
    inputDom = input.$refs.input;
    inputDom.dispatchEvent(new Event('input'));
    expect(input.currentValue).to.equal('test');
  });

  it('should resizeTextarea correct', (done) => {
    vm = createInput({
      value: 'test'
    });
    const input = vm.$refs.input;
    expect(input.currentValue).to.equal('test');
    vm.props.value = 'test2';
    setTimeout(() => {
      expect(input.currentValue).to.equal('test2');
      done();
    });
  });

  it('should suspendBeforeClearTest&restrictionTest correct', () => {
    vm = createInput({
      suspendBeforeClear: true,
      restriction: () => {return true;}
    });
    let input = vm.$refs.input;
    let result = input.suspendBeforeClearTest();
    let result2 = input.restrictionTest();
    expect(result).to.be.true;
    expect(result2).to.be.true;
    vm.$destroy();
    vm = createInput({
      suspendBeforeClear: () => { return true; },
      restriction: 'number'
    });
    input = vm.$refs.input;
    result = input.suspendBeforeClearTest();
    result2 = input.restrictionTest('test');
    expect(result).to.be.true;
    expect(result2).to.be.false;
  });

  it('should focus&blur correct', () => {
    vm = createInput({
      type: 'textarea'
    });
    let input = vm.$refs.input;
    let textareaDom = input.$refs.textarea;
    input.focus();
    expect(document.activeElement === textareaDom).to.be.true;
    input.blur();
    expect(document.activeElement === textareaDom).to.be.false;
    vm.$destroy();
    vm = createInput();
    input = vm.$refs.input;
    let inputDom = input.$refs.input;
    input.focus();
    expect(document.activeElement === inputDom).to.be.true;
    input.blur();
    expect(document.activeElement === inputDom).to.be.false;
  });
});

