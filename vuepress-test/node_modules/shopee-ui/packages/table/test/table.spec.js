import Vue from 'vue';
import ShopeeTable from '../index';
import ShopeeIcon from '../../icon';
import ShopeeCheckbox from '../../checkbox';
import ShopeeDropdown from '../../dropdown';
import { destroyInstance, createElement } from '@/test/utils';

Vue.use(ShopeeTable);
Vue.use(ShopeeIcon);
Vue.use(ShopeeCheckbox);
Vue.use(ShopeeDropdown);

const createTable = options => {
  let {data, columns} = options;
  return new Vue({
    template: `<shopee-table :data="rows">
      <shopee-table-column v-for="(column, index) in columns" :key="index" :prop="column.prop" :label="column.label"></shopee-table-column>
    </shopee-table>`,
    data() {
      return {
        columns,
        rows: data
      };
    }
  }).$mount(createElement());
};

const createSelectableTable = options => {
  let {data, columns, rowKey, selectedRows, selectionChange} = options;
  return new Vue({
    template: `<shopee-table :data="rows" :selected-rows="selectedRows" @selection-change="selectionChange">
      <shopee-table-column type="selection" :row-key="rowKey"></shopee-table-column>
      <shopee-table-column v-for="(column, index) in columns" :key="index" :prop="column.prop" :label="column.label"></shopee-table-column>
    </shopee-table>`,
    data() {
      return {
        columns,
        rows: data,
        rowKey,
        selectedRows,
        selectionChange
      };
    }
  }).$mount(createElement());
};

const createSortableTable = options => {
  let {data, columns, rowKey, selectedRows} = options;
  return new Vue({
    template: `<shopee-table :data="rows" :selected-rows="selectedRows">
      <shopee-table-column sortable v-for="(column, index) in columns" :key="index" :prop="column.prop" :label="column.label"></shopee-table-column>
    </shopee-table>`,
    data() {
      return {
        columns,
        rows: data,
        rowKey,
        selectedRows
      };
    }
  }).$mount(createElement());
};

const createFilterTable = options => {
  let {data, columns, filters} = options;
  return new Vue({
    template: `<shopee-table :data="rows">
      <shopee-table-column :filters="filters" v-for="(column, index) in columns" :key="index" :prop="column.prop" :label="column.label"></shopee-table-column>
    </shopee-table>`,
    data() {
      return {
        columns,
        rows: data,
        filters
      };
    }
  }).$mount(createElement());
};

const createStickyHeaderTable = options => {
  let {data, columns} = options;
  return new Vue({
    template: `<shopee-table sticky-header :data="rows">
      <shopee-table-column v-for="(column, index) in columns" :key="index" :prop="column.prop" :label="column.label"></shopee-table-column>
    </shopee-table>`,
    data() {
      return {
        columns,
        rows: data
      };
    }
  }).$mount(createElement());
};

const createCustomTable = options => {
  let {data, columns} = options;
  return new Vue({
    template: `<shopee-table :data="rows" ref="table">
      <shopee-table-column v-for="(column, index) in columns" :key="index" :prop="column.prop" :label="column.label"></shopee-table-column>
    </shopee-table>`,
    data() {
      return {
        columns,
        rows: data
      };
    }
  }).$mount(createElement());
};

const basicOptions = {
  columns: [{
    prop: 'name',
    label: 'Name',
    width: 200
  }, {
    prop: 'age',
    label: 'Age',
    width: 200
  }, {
    prop: 'city',
    label: 'City',
    width: 200
  }],
  data: [{
    name: 'name',
    age: 1,
    city: 'beijing'
  }, {
    name: 'name2',
    age: 2,
    city: 'shenzhen'
  }, {
    name: 'name3',
    age: 3,
    city: 'beijing'
  }]
};

describe('table.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });

  it('should render correct', () => {
    vm = createTable(basicOptions);
    expect(vm.$el.classList.contains('shopee-table')).to.be.true;
  });

  it('should render correct selection status', done => {
    vm = createSelectableTable({
      ...basicOptions,
      selectedRows: [1],
      rowKey: 'age',
      selectionChange(data) {
        vm.selectedRows = data;
      }
    });
    setTimeout(() => {
      expect(vm.$el.querySelector('.shopee-table__main-body .shopee-checkbox input').checked).to.be.true;
      done();
    });
  });

  it('should select current item when checkbox checked', done => {
    vm = createSelectableTable({
      ...basicOptions,
      selectedRows: [],
      rowKey: 'age',
      selectionChange(data) {
        vm.selectedRows = data;
      }
    });
    setTimeout(() => {
      let checkbox = vm.$el.querySelector('.shopee-table__main-body .shopee-checkbox');
      checkbox.click();
      setTimeout(() => {
        expect(vm.selectedRows[0]).to.equal(1);
        done();
      });
    });
  });

  it('should select all when checkbox in header checked', done => {
    vm = createSelectableTable({
      ...basicOptions,
      selectedRows: [1],
      rowKey: 'age',
      selectionChange(data) {
        vm.selectedRows = data;
      }
    });
    setTimeout(() => {
      let headerCheckbox = vm.$el.querySelector('.shopee-table__main-header .shopee-checkbox');
      headerCheckbox.click();
      setTimeout(() => {
        expect(vm.selectedRows.length).to.equal(basicOptions.data.length);
        done();
      });
    });
  });

  it('should render correct sortable table', done => {
    vm = createSortableTable({
      ...basicOptions
    });
    setTimeout(() => {
      expect(vm.$el.querySelector('.shopee-table__main-header th .shopee-table__cell .shopee-table__sort-icons')).not.equal(null);
      done();
    });
  });

  it('should render correct filter table', done => {
    vm = createFilterTable({
      ...basicOptions,
      filters: [{
        text: '',
        value: -1
      }]
    });
    setTimeout(() => {
      expect(vm.$el.querySelector('.shopee-table__main-header th .shopee-table__cell .shopee-table__cell-filter')).not.equal(null);
      done();
    });
  });

  it('should render correct sticky header table', done => {
    vm = createStickyHeaderTable({
      ...basicOptions
    });
    setTimeout(() => {
      expect(vm.$el.querySelector('.shopee-table__header-container').style.position).be.equal('sticky');
      done();
    });
  });

  it('should render correct grouping header table', done => {
    vm = new Vue({
      template: `<shopee-table :data="rows">
        <shopee-table-column
          prop="name"
          label="Name"
          :width="120">
        </shopee-table-column>
        <shopee-table-column label="Other Info">
          <shopee-table-column
            prop="age"
            label="Age"
            :width="120">
          </shopee-table-column>
          <shopee-table-column
            prop="city"
            label="City"
            :width="120">
          </shopee-table-column>
        </shopee-table-column>
      </shopee-table>`,
      data() {
        return {
          rows: basicOptions.data
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      expect(vm.$el.querySelectorAll('.shopee-table__main-header thead tr').length).to.equals(2);
      expect(vm.$el.classList.contains('shopee-table--border')).to.be.true;
      done();
    });
  });

  it('should getHeadHeights correct', done => {
    vm = new Vue({
      template: `<shopee-table :data="data" :scrollBarSticky="true" ref="table" :style="{overflow: 'auto'}">
          <shopee-table-column v-for="(column, index) in columns" :key="index" :prop="column.prop" :label="column.label"></shopee-table-column>
        </shopee-table>`,
      data() {
        return {
          columns: basicOptions.columns,
          data: basicOptions.data
        };
      }
    }).$mount(createElement());
    setTimeout(() => {
      const table = vm.$refs.table;
      expect(!!table.getHeadHeights()).to.be.true;
      done();
    });
  });

  it('should getRowHeights correct', done => {
    vm = new Vue({
      template: `<shopee-table :data="rows" ref="table">
          <shopee-table-column v-for="(column, index) in columns" :key="index" :prop="column.prop" :label="column.label"></shopee-table-column>
        </shopee-table>`,
      data() {
        return {
          columns: basicOptions.columns,
          rows: basicOptions.data
        };
      }
    }).$mount(createElement());
    const table = vm.$refs.table;
    setTimeout(() => {
      expect(Object.keys(table.getRowHeights()).length).to.equal(3);
      done();
    });
  });

  it('should handleHorizontalMousewheel&handleMousewheel correct', done => {
    vm = createCustomTable(basicOptions);
    const table = vm.$refs.table;
    setTimeout(() => {
      table.handleHorizontalMousewheel(new Event('mouseover'),{
        pixelX: 1,
        pixelY: 1,
      });
      table.handleMousewheel(new Event('mouseover'),{
        pixelX: 1,
        pixelY: 2,
      });
      done();
    }, 10);
  });

  it('should sort&clearSort correct', done => {
    vm = createCustomTable(basicOptions);
    const table = vm.$refs.table;
    table.sort({
      column: {
        sortMethod: () => {
          return true;
        },
        sortable: true
      },
      type: 'desc'
    });
    expect(table.sortMethod).to.exist;
    setTimeout(() => {
      table.clearSort();
      expect(table.sortMethod).to.equal(null);
      done();
    });
  });

  it('should filter&handleStickyState correct', done => {
    vm = createCustomTable(basicOptions);
    const table = vm.$refs.table;
    table.filter([]);
    expect(table.filterMethods).to.exist;
    setTimeout(() => {
      table.handleStickyState('sticky');
      expect(table.stickyState).to.equal('on');
      done();
    });
  });
});
