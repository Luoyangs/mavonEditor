import { EventBusMixin } from 'shopee-ui/lib/base';

export default {
  name: 'ShopeeTableHeader',
  mixins: [EventBusMixin],
  props: {
    columns: Array
  },
  data() {
    return {
      sortStatus: null,
      filters: []
    };
  },
  computed: {
    table() {
      let parent = this.$parent;
      while (parent && parent.$options.name !== 'ShopeeTable') {
        parent = parent.$parent;
      }
      return parent;
    },
    selectedAll() {
      return this.table.selectionStatus === 'all';
    },
    selectionStatus() {
      return this.table.selectionStatus;
    }
  },
  methods: {
    toggleSelectedAll(checked, prop) {
      this.dispatch('ShopeeTable', 'seleced-all-change', checked, prop);
    },
    clearSort() {
      if (this.sortStatus) {
        const column = this.columns.find(column => column.id === this.sortStatus.id);
        if (column && column.sortable === 'custom') {
          this.dispatch('ShopeeTable', 'sort-change', {column, type: ''});
        }
      }
      this.sortStatus = null;
    },
    sortChange(column) {
      if (this.sortStatus && column.id !== this.sortStatus.id) {
        this.sortStatus = null;
      }
    },
    sort(column, type) {
      const reverseSort = this.table.reverseSort;
      const [first, second, third] = reverseSort ? ['desc', 'asc', ''] : ['asc', 'desc', ''];
      if (!type) {
        if (this.sortStatus && this.sortStatus.id === column.id) {
          const order = this.sortStatus.type;
          type = order === first ? second : (order === second ? third : first);
        } else {
          type = first;
        }
      }
      this.sortStatus = !type ? null : {
        id: column.id,
        column,
        type
      };

      this.dispatch('ShopeeTable', 'sort', {column, type});
    },
    filter(val, column) {
      if (column.filters && column.filters.length > 0) {
        const filter = this.filters.find(filter => filter.id === column.id);
        if (filter) {
          filter.value = val;
        } else {
          this.filters.push({
            id: column.id,
            value: val,
            column
          });
        }
        this.dispatch('ShopeeTable', 'filters-change', this.filters);
      }
    },
    activeFilteredValue() {
      this.columns.forEach(column => {
        if (column.filteredValue !== undefined) {
          this.filter(column.filteredValue, column);
        }
      });
    },
    getRowStyle(rowIndex) {
      return {
        height: this.table.headHeights[rowIndex] + 'px'
      };
    }
  },
  created() {
    this.$on('sort-change', this.sortChange);
    this.$on('clear-sort', this.clearSort);
  },
  mounted() {
    this.activeFilteredValue();
  },
  render(h) {
    const getBaseColumns = this.table.getBaseColumns;
    const convertToRows = columns => {
      if (columns.length === 0) {
        return [];
      }
      const maxLevel = this.table.maxLevel;
      const result = [...Array(maxLevel)].map(() => []); // two-dimensional array which length is maxLevel
      const update = columns => {
        columns.forEach(column => {
          const rowIndex = column.level - 1;
          const hasChild = column.children && column.children.length > 0;
          column.colSpan = hasChild ? getBaseColumns(column.children).length : 1;
          column.rowSpan = hasChild ? 1 : maxLevel - rowIndex;
          result[rowIndex].push(column);
          if (hasChild) {
            update(column.children);
          }
        });
      };
      update(columns);
      return result;
    };
    const rowedColumns = convertToRows(this.columns);
    const baseColumns = getBaseColumns(this.columns);
    const width = baseColumns.reduce((width, column) => width + column.realWidth, 0);
    return (
      <table cellspacing="0" cellpadding="0" border="0" style={{'width': width + 'px'}} class="shopee-table__header">
        <colgroup>
          {this._l(baseColumns, (column, index) => <col key={index} width={column.realWidth}></col>)}
        </colgroup>
        <thead>
          {this._l(rowedColumns, (columns, rowIndex) =>
            <tr
              style={this.getRowStyle(rowIndex)}>
              {this._l(columns, (column, cellIndex) => {
                const index = column.index;
                return (
                  <th
                    colspan={column.colSpan}
                    rowspan={column.rowSpan}
                    key={rowIndex + '' + cellIndex}
                    class={[
                      column.filterVisible ? 'filter-expand' : ''
                    ]}>
                    <div
                      class={[
                        'shopee-table__cell',
                        column.align ? 'align-' + column.align : '',
                        column.isLast ? 'last-cell' : '',
                        column.isFirst ? 'first-cell' : ''
                      ]}>
                      {column.headerRender.call(this._renderProxy, h, {column, index})}
                    </div>
                  </th>
                );
              })}
            </tr>
          )}
        </thead>
      </table>
    );
  }
};
