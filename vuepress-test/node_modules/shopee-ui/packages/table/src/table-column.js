import { EventBusMixin } from 'shopee-ui/lib/base';
import { mergeDeep } from 'shopee-ui/lib/base';
import arrowUpSIcon from '@shopee-ui/icon/svg/arrow-up-s.svg';
import arrowDownSIcon from '@shopee-ui/icon/svg/arrow-down-s.svg';
import questionIcon from '@shopee-ui/icon/svg/question-mark.svg';
import arrowDownIcon from '@shopee-ui/icon/svg/arrow-down.svg';

let columnId = 1;

const headerRender = (self) => {
  const getLabel = function(h, data) {
    if (self.$scopedSlots.header) {
      return self.$scopedSlots.header(data);
    } else if (self.$slots.header) {
      return self.$slots.header;
    } else {
      const column = data.column;
      if (column.filters && column.filteredValue !== undefined) {
        const activedFilter = column.filters.find(n => n.value === column.filteredValue);
        return activedFilter.text;
      }
      return column.label;
    }
  };

  const labelRender = function(h, data) {
    return (
      <span class='shopee-table__cell-label'>{data && getLabel.call(this, h, data)}</span>
    );
  };

  const actionsRender = function(h, data) {
    const column = data.column;
    if (column.info || column.sortable || (column.filters && column.filters.length > 0)) {
      const sortStatusClass = column.sortable && this.sortStatus && this.sortStatus.id === column.id ? 'sort-' + this.sortStatus.type : '';
      return (
        <div class={['shopee-table__cell-actions', sortStatusClass]}>
          {
            column.info && (
              <shopee-popover class='shopee-table__cell-action shopee-table__cell-info' trigger='hover' content={column.info}>
                <shopee-icon class='shopee-table__cell-icon' svg={questionIcon}></shopee-icon>
              </shopee-popover>
            )
          }
          {
            column.sortable && (
              <div class='shopee-table__cell-action shopee-table__cell-icon shopee-table__sort-icons' on-click={() => this.sort(column)}>
                <shopee-icon class='shopee-table__sort-icon up' svg={arrowUpSIcon}></shopee-icon>
                <shopee-icon class='shopee-table__sort-icon down' svg={arrowDownSIcon}></shopee-icon>
              </div>
            )
          }
          {
            column.filters && (
              <shopee-dropdown class='shopee-table__cell-action shopee-table__cell-filter' on-visible-change={self.onFilterVisibleChange}>
                <shopee-icon class='shopee-table__cell-icon' svg={arrowDownIcon} nativeOn-click={self.onFilterClick}></shopee-icon>
                {
                  h('shopee-dropdown-menu', {
                    slot: 'dropdown',
                    props: {
                      placement: column.filterPlacement,
                      popperRef: self.filterPopperRef,
                      fullWidth: true
                    },
                    on: {
                      click: (val) => {
                        column.filteredValue = val;
                        self.$emit('filter-change', val, column);
                        this.filter(val, column);
                      }
                    }
                  }, [
                    column.filters.map(filter => (
                      <shopee-dropdown-item selected={filter.value === column.filteredValue} name={filter.value}>{filter.text}</shopee-dropdown-item>
                    ))
                  ])
                }
              </shopee-dropdown>
            )
          }
        </div>
      );
    }
  };

  const selectionRender = function(h, data) {
    const column = data.column;
    const prop = column.rowKey || column.prop || 'id';
    return (
      <div class="shopee-table__cell-actions">
        {
          h('shopee-checkbox', {
            props: Object.assign({
              acturalValue: this.selectedAll,
              indeterminate: this.selectionStatus === 'part'
            }, column.headerCheckboxProps()),
            on: {
              change: checked => this.toggleSelectedAll(checked, prop)
            }
          })
        }
      </div>
    );
  };

  return function(h, data) {
    switch (self.type) {
      case 'selection':
        return selectionRender.call(this, h, data);
      case 'expand':
      case 'expand-tree':
        return labelRender.call(this, h, data);
      default:
        // add default value of label
        data.column.label = data.column.label || '#';
        return [
          labelRender.call(this, h, data),
          actionsRender.call(this, h, data)
        ];
    }
  };
};

const cellRender = (self) => {
  const defalutRender = function(h, data) {
    if (self.$scopedSlots.default) {
      return self.$scopedSlots.default(data);
    } else {
      const value = data.row[data.column.prop];
      if (data.column.formatter) {
        return data.column.formatter(mergeDeep(value), mergeDeep(data));
      } else {
        return value;
      }
    }
  };
  const selectionRender = function(h, data) {
    const { row, column } = data;
    const rowValue = row[column.rowKey || column.prop || 'id'];
    return (
      <div class="shopee-table__cell-actions">
        {
          h('shopee-checkbox', {
            props: Object.assign({
              acturalValue: this.isRowSelected(rowValue),
            }, column.checkboxProps(mergeDeep(row))),
            on: {
              change: checked => {
                self.$emit('checkbox-change', checked, data.rowIndex);
                this.toggleRowSelection(checked, rowValue);
              }
            },
            nativeOn: {
              click: e => e.stopPropagation()
            }
          })
        }
      </div>
    );
  };
  const expandRender = function(h, data) {
    const { row, column, expanded } = data;
    const prop = column.rowKey || column.prop || 'id';
    if (expanded !== undefined) {
      if (self.$scopedSlots.expandAction) {
        return (
          <div class="shopee-table__cell-actions">
            <div on-click={() => this.toggleRowExpand(row, prop)}>
              {self.$scopedSlots.expandAction(data)}
            </div>
          </div>
        );
      }
      return (
        <div class="shopee-table__cell-actions">
          <shopee-icon class={['shopee-table__cell-icon expand-icon', expanded && 'expanded']} svg={arrowDownIcon} nativeOn-click={() => this.toggleRowExpand(row, prop)}></shopee-icon>
        </div>
      );
    }
  };
  const expandChildRender = function(h, data) {
    if (self.type === 'expand') {
      if (self.$scopedSlots.default) {
        return self.$scopedSlots.default(data);
      }
    }
  };
  return function(h, data) {
    const type = data.type || self.type;
    switch (type) {
      case 'selection':
        return selectionRender.call(this, h, data);
      case 'expand':
      case 'expand-tree':
        return expandRender.call(this, h, data);
      case 'expand-child':
        return expandChildRender.call(this, h, data);
      default:
        return defalutRender.call(this, h, data);
    }
  };
};

export default {
  name: 'ShopeeTableColumn',
  mixins: [EventBusMixin],
  props: {
    label: String,
    prop: String,
    type: String, // `selection`/`expand`/`expand-tree`
    rowKey: String,
    width: Number,
    fixed: {
      type: String,
      default: '',
      validator(value = '') {
        return ['left', 'right', ''].indexOf(value) >= 0;
      }
    },
    order: Number,
    info: String,
    sortable: [Boolean, String],
    sortMethod: Function,
    filters: Array,
    filterMethod: Function,
    filterPlacement: {
      type: String,
      default: 'bottom-start'
    },
    filteredValue: {},
    align: String,
    formatter: Function,
    checkboxProps: {
      type: Function,
      default() {
        return () => {};
      }
    },
    headerCheckboxProps: {
      type: Function,
      default() {
        return () => {};
      }
    },
    expandTreeChildProp: {
      type: String,
      default: 'children'
    },
    // `none`/`all`/Array/Function
    defaultExpandRows: {
      type: [String, Array, Function],
      default: 'none'
    }
  },
  data() {
    return {
      column: {},
      filterPopperRef: null
    };
  },
  computed: {
    parent() {
      let parent = this.$parent;
      while (parent && parent.$options.name !== 'ShopeeTable' && parent.$options.name !== 'ShopeeTableColumn') {
        parent = parent.$parent;
      }
      return parent;
    },
    level() {
      return this.parent.level ? this.parent.level + 1 : 1;
    },
    isExpandType() {
      return this.type && this.type.indexOf('expand') > -1;
    }
  },
  watch: {
    width(val) {
      this.column.width = val;
      this.column.realWidth = val;
      this.dispatch('ShopeeTable', 'layout');
    }
  },
  created() {
    this.$options.render = h => h('div', this.$slots.default);

    // init column
    const defaultWidth = this.getDefaultWidth();
    const column = {
      id: columnId++,
      label: this.label,
      prop: this.prop,
      type: this.type,
      rowKey: this.rowKey,
      order: this.order,
      level: this.level,
      width: this.width || defaultWidth,
      realWidth: this.width || defaultWidth,
      fixed: this.fixed,
      info: this.info,
      sortable: this.sortable,
      sortMethod: this.sortMethod,
      filters: this.filters,
      filterMethod: this.filterMethod,
      filterPlacement: this.filterPlacement,
      filteredValue: this.filteredValue,
      filterVisible: false,
      align: this.align,
      formatter: this.formatter,
      checkboxProps: this.checkboxProps,
      headerCheckboxProps: this.headerCheckboxProps,
      expandTreeChildProp: this.expandTreeChildProp,
      defaultExpandRows: this.defaultExpandRows,
      children: null,
      headerRender: headerRender(this),
      cellRender: cellRender(this)
    };
    this.column = column;
    // push to children prop of parent column
    if (this.parent.level) {
      const parent = this.parent;
      if (!parent.column.children) {
        parent.column.children = [];
      }
      parent.column.children.push(this.column);
    }
    if (this.isExpandType && !this.prop) {
      console.warn(`[ShopeeUI warn][Table]: The table column of type ${this.type} cannot be missing \`prop\` property`);
    }
  },
  mounted() {
    this.dispatch('ShopeeTable', 'add-column', this.column);
  },
  beforeDestroy() {
    // remove from children of parent column
    if (this.parent.level) {
      let child = this.parent.column.children;
      const index = child.findIndex(n => n.id === this.column.id);
      this.parent.column.children = child.slice(0, index).concat(child.slice(index + 1));
    }
  },
  destroyed() {
    this.dispatch('ShopeeTable', 'remove-column', this.column);
  },
  methods: {
    onFilterClick(event) {
      if (!this.filterPopperRef) {
        let parent = event.target;
        while (parent && parent.tagName !== 'TH') {
          parent = parent.parentNode;
        }
        this.filterPopperRef = parent;
      }
    },
    onFilterVisibleChange(val) {
      this.column.filterVisible = val;
    },
    getDefaultWidth() {
      if (this.isExpandType) {
        return 40;
      }
    }
  }
};
