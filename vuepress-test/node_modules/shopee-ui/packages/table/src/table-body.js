import { EventBusMixin } from 'shopee-ui/lib/base';
import { debounce, mergeDeep } from 'shopee-ui/lib/base';

export default {
  name: 'ShopeeTableBody',
  mixins: [EventBusMixin],
  props: {
    columns: Array,
    data: Array
  },
  computed: {
    table() {
      let parent = this.$parent;
      while (parent && parent.$options.name !== 'ShopeeTable') {
        parent = parent.$parent;
      }
      return parent;
    },
    debounce() {
      return debounce(n => n(), 50);
    }
  },
  methods: {
    isRowSelected(rowValue) {
      return this.table.selectedRows.indexOf(rowValue) !== -1;
    },
    toggleRowSelection(checked, rowValue) {
      this.dispatch('ShopeeTable', 'row-selection-change', checked, rowValue);
    },
    toggleRowExpand(row, prop) {
      this.dispatch('ShopeeTable', 'row-expand-change', row, prop);
    },
    onClickRow(row, rowIndex) {
      this.dispatch('ShopeeTable', 'row-click', rowIndex, row);
    },
    onMouseenterRow(rowIndex) {
      this.debounce(() => {
        this.dispatch('ShopeeTable', 'row-hover', rowIndex);
      });
    },
    onMouseleaveRow() {
      this.debounce(() => {
        this.dispatch('ShopeeTable', 'row-hover', null);
      });
    },
    getRowClassName(row, rowIndex) {
      const isHovered = rowIndex === this.table.hoveredRow;
      const isDisabled = this.table.rowDisabled && this.table.rowDisabled(mergeDeep(row), rowIndex);
      const valign = this.table.valign;
      let customClassName = this.table.rowClassName;
      if (typeof customClassName === 'function') {
        customClassName = customClassName(mergeDeep(row), rowIndex);
      }
      return [
        'shopee-table__row',
        isHovered ? 'hover-row' : '',
        isDisabled ? 'disabled' : '',
        valign !== 'middle' ? 'valign-' + valign : '',
        customClassName
      ];
    },
    getRowStyle(row, rowIndex) {
      return {
        height: this.table.rowHeights[rowIndex] + 'px'
      };
    },
    getRowKey(row, rowIndex) {
      const rowKey = this.table.rowKey;
      if (typeof rowKey === 'function') {
        return rowKey(row, rowIndex);
      } else if (row.hasOwnProperty(rowKey)) {
        return row[rowKey];
      }
    },
  },
  render(h) {
    const rows = this.data;
    const baseColumns = this.columns;
    const width = baseColumns.reduce((width, column) => width + column.realWidth, 0);
    const expandColumn = this.table.expandColumn;
    const getExpandRow = this.table.getExpandRow;
    const expandColumnIndex = baseColumns.findIndex(column => expandColumn && column.id === expandColumn.id);
    return (
      <table cellspacing="0" cellpadding="0" border="0" class="shopee-table__body" style={{'width': width + 'px'}}>
        <colgroup>
          {this._l(baseColumns, (column, index) => <col key={index} width={column.realWidth}></col>)}
        </colgroup>
        <tbody>
          {this._l(rows, (row, rowIndex) => {
            const hasChildren = expandColumn && (expandColumn.type === 'expand' ||
              expandColumn.type === 'expand-tree' &&
              row[expandColumn.expandTreeChildProp] &&
              row[expandColumn.expandTreeChildProp].length > 0);
            const expanded = hasChildren ? getExpandRow(row, expandColumn.prop) : undefined;
            return [
              <tr
                key={this.getRowKey(row, rowIndex) || rowIndex}
                class={this.getRowClassName(row, rowIndex)}
                style={this.getRowStyle(row, rowIndex)}
                on-click={() => this.onClickRow(row, rowIndex)}
                on-mouseenter={() => this.onMouseenterRow(rowIndex)}
                on-mouseleave={this.onMouseleaveRow}>
                {this._l(baseColumns, (column, index) => (
                  <td key={index}
                    class={[
                      column.isLast ? 'is-last' : '',
                      column.isFirst ? 'is-first' : '',
                      expanded !== undefined && expandColumn === column ? 'expand-action' : '',
                      expanded && expandColumn === column ? 'expanded' : ''
                    ]}>
                    <div
                      class={[
                        'shopee-table__cell',
                        column.align ? 'align-' + column.align : '',
                        column.isLast ? 'last-cell' : '',
                        column.isFirst ? 'first-cell' : ''
                      ]}>
                      {column.cellRender.call(this._renderProxy, h, {row, column, rowIndex, columnIndex: column.index, expanded})}
                    </div>
                  </td>
                ))}
              </tr>,
              expanded && expandColumn.type === 'expand' && (
                <tr
                  key={`${this.getRowKey(row, rowIndex) || rowIndex}-expand`}
                  class={'shopee-table__row-expanded'}
                  style={this.getRowStyle(row, `${rowIndex}-${0}`)}>
                  <td
                    colspan={baseColumns.length}
                    class={[
                      baseColumns.some(column => column.isLast) ? 'is-last' : '',
                      baseColumns.some(column => column.isFirst) ? 'is-first' : '',
                      expandColumnIndex > -1 ? 'expand' : ''
                    ]}>
                    {expandColumnIndex > -1 && (
                      <div class={['shopee-table__cell', 'shopee-table__cell--expanded']}>
                        {expandColumn.cellRender.call(this._renderProxy, h, {row, column: expandColumn, rowIndex, type: 'expand-child'})}
                      </div>
                    )}
                  </td>
                </tr>
              ),
              expanded && expandColumn.type === 'expand-tree' && (
                this._l(row[expandColumn.expandTreeChildProp], (childRow, childIndex) => {
                  const childRowIndex = `${rowIndex}-${childIndex}`;
                  return (
                    <tr
                      key={this.getRowKey(childRow, childRowIndex) || childRowIndex}
                      class={[this.getRowClassName(childRow, childRowIndex), 'shopee-table__row-expanded']}
                      style={this.getRowStyle(childRow, childRowIndex)}
                      on-click={() => this.onClickRow(childRow, childRowIndex)}
                      on-mouseenter={() => this.onMouseenterRow(childRowIndex)}
                      on-mouseleave={this.onMouseleaveRow}>
                      {this._l(baseColumns, (column, index) => (
                        <td key={index}
                          class={[
                            column.isLast ? 'is-last' : '',
                            column.isFirst ? 'is-first' : '',
                            index === expandColumnIndex ? 'expand' : ''
                          ]}>
                          {index !== expandColumnIndex && (
                            <div
                              class={[
                                'shopee-table__cell',
                                column.align ? 'align-' + column.align : '',
                                column.isLast ? 'last-cell' : '',
                                column.isFirst ? 'first-cell' : ''
                              ]}>
                              {column.cellRender.call(this._renderProxy, h, {row: childRow, column, rowIndex: childRowIndex, columnIndex: column.index})}
                            </div>
                          )}
                        </td>
                      ))}
                    </tr>
                  );
                })
              )
            ];
          })}
        </tbody>
      </table>
    );
  }
};
