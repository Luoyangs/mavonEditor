import { Icon as ShopeeIcon } from 'shopee-ui/lib/icon';
import { FormItemMixin } from 'shopee-ui/lib/base';
import loadingIcon from '@shopee-ui/icon/svg/loading.svg';

export default {
  name: 'ShopeeButton',
  components: {
    ShopeeIcon
  },
  mixins: [FormItemMixin],
  props: {
    type: String,
    // x-large, large, normal, small
    size: {
      type: String,
      validator(value = 'normal') {
        return ['x-large', 'large', 'normal', 'small'].indexOf(value) >= 0;
      }
    },
    disabled: {
      type: Boolean,
      default: false
    },
    // outline button
    outline: Boolean,
    // frameless button
    frameless: Boolean,
    // dashed button
    dashed: Boolean,
    // ghost button
    ghost: Boolean,
    // full width button
    fullWidth: Boolean,
    // compact button
    compact: Boolean,
    // round button
    round: Boolean,
    // circle button
    circle: Boolean,
    // rich content button
    rich: Boolean,
    loading: Boolean,
    icon: String,
    suffixIcon: String,
    nativeType: {
      type: String,
      default: 'button'
    },
    // same as a's href
    href: String,
    // works only href is posted
    target: String
  },
  computed: {
    buttonClass() {
      const { type, sizeClass, outline, frameless, dashed, fullWidth, compact, round, circle, rich, disabled, loading, ghost, href} = this;

      return {
        'shopee-button': true,
        [`shopee-button--${type}`]: type,
        [`shopee-button--${sizeClass}`]: sizeClass,
        'shopee-button--outline': outline,
        'shopee-button--frameless': frameless,
        'shopee-button--dashed': dashed,
        'shopee-button--ghost': ghost,
        'shopee-button--block': fullWidth,
        'shopee-button--compact': compact,
        'shopee-button--round': round,
        'shopee-button--circle': circle,
        'shopee-button--rich': this.$slots.description || rich,
        'disabled': disabled,
        'loading': loading,
        'underline': href && type === 'link'
      };
    },
  },
  mounted() {
    document.documentElement.addEventListener('keydown', this.handlePressTab);
  },
  beforeDestroy() {
    document.documentElement.removeEventListener('keydown', this.handlePressTab);
  },
  methods: {
    onClick(event) {
      document.documentElement.removeAttribute('data-focus-visible');
      if (this.loading) {
        return;
      }
      if (this.disabled) {
        event.preventDefault();
        return;
      }
      this.$emit('click', event);
    },
    handlePressTab(event) {
      const keyCode = event.keyCode || event.which;
      if (keyCode === 9) {
        document.documentElement.setAttribute('data-focus-visible', '');
      }
    }
  },
  render() {
    const { href, target, buttonClass, icon, loading, suffixIcon, nativeType, disabled } = this;

    let template = <button type={nativeType} class={buttonClass} disabled={disabled} on-click={this.onClick}></button>;
    if (href) {
      template = <a class={buttonClass} href={href} target={target} on-click={this.onClick}></a>;
    }

    template.children = template.children || [];
    if (icon && !loading) {
      template.children.push(<shopee-icon svg={icon}></shopee-icon>);
    }
    if (loading) {
      template.children.push(<shopee-icon svg={loadingIcon} spin></shopee-icon>);
    }
    if (this.$slots.default && !this.$slots.description) {
      template.children.push(<span>{this.$slots.default}</span>);
    }
    if (suffixIcon && !loading) {
      template.children.push(<shopee-icon svg={suffixIcon}></shopee-icon>);
    }
    if (this.$slots.description) {
      template.children.push(<div class="shopee-button__rich-content"><span>{this.$slots.default}</span><div class="shopee-button__description">{this.$slots.description}</div></div>);
    }

    return template;
  }
};
