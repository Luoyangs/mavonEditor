import Vue from 'vue';
import ShopeeButton from '../index';
import { createInstance, destroyInstance } from '@/test/utils';

Vue.use(ShopeeButton);

/**
 * create shopee-button instance
 * @param  {Object} propsData the propsData pass to button
 * @return {Object} the button instance
 */
const createButton = propsData => {
  return createInstance(ShopeeButton, propsData);
};

describe('button.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });

  it('should render correct type', () => {
    vm = createButton({
      type: 'primary'
    });
    expect(vm.$el.classList.contains('shopee-button--primary'))
      .to.be.true;
    expect(vm.$el.tagName).equal('BUTTON');
  });

  it('should render a instead of button', () => {
    vm = createButton({
      type: 'primary',
      href: 'https: //shopee.tw'
    });
    expect(vm.$el.classList.contains('shopee-button--primary'))
      .to.be.true;
    expect(vm.$el.tagName).equal('A');
  });

  it('should render correct size', () => {
    vm = createButton({
      size: 'large'
    });
    expect(vm.$el.classList.contains('shopee-button--large'))
      .to.be.true;
  });

  it('should disabled the button', () => {
    vm = createButton({
      disabled: true
    });
    expect(vm.$el.classList.contains('disabled'))
      .to.be.true;
  });

  it('should response to the click event', done => {
    let res;
    vm = new Vue({
      template: '<shopee-button @click="onButtonClick">ShopeeButton</shopee-button>',
      methods: {
        onButtonClick(event) {
          res = event;
        }
      }
    }).$mount();
    vm.$el.click();
    setTimeout(() => {
      expect(res).to.exist;
      done();
    }, 20);
  });

  it('should not response to the click event when the button is loading', done => {
    let res;
    vm = new Vue({
      template: '<shopee-button loading @click="onButtonClick">ShopeeButton</shopee-button>',
      methods: {
        onButtonClick(event) {
          res = event;
        }
      }
    }).$mount();
    vm.$el.click();
    setTimeout(() => {
      expect(res).not.to.exist;
      done();
    }, 20);
  });
});
