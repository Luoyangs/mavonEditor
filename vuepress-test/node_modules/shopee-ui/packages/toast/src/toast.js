import Vue from 'vue';
import ShopeeToast from './toast.vue';
import ShopeeToastContainer from './toasts.vue';

let container = null;

let toastId = 0;

const TYPES = ['success', 'error', 'warning', 'message'];
const ToastConstructor = Vue.extend(ShopeeToast);
const ToastContainerConstructor = Vue.extend(ShopeeToastContainer);

const createToastContainer = () => {
  if (!container) {
    container = new ToastContainerConstructor().$mount();
    container.max = (Vue.$SHOPEE || {}).toastMaxCount || 2;
    document.body.appendChild(container.$el);
  }
  return container;
};

const Toast = options => {
  options = options || {};
  if (typeof options === 'string') {
    options = {
      type: TYPES.indexOf(options) !== -1 ? options : 'message'
    };
  }

  let close = null;
  if (options.container) {
    const instance = new ToastConstructor();
    Object.keys(options).forEach(key => {
      instance[key] = options[key];
    });
    const vm = instance.$mount();
    options.container.appendChild(vm.$el);
    instance.visible = true;
    close = instance.close;
  } else {
    const toastContainer = createToastContainer();
    const id = toastId++;
    toastContainer.add({
      id,
      visible: true,
      ...options
    });
    close = () => toastContainer.closeToast(id);
  }
  return () => {
    close();
  };
};

TYPES.forEach(type => {
  Toast[type] = options => {
    if (typeof options === 'string') {
      options = {
        message: options
      };
    }
    options.type = type;
    return Toast(options);
  };
});

export default Toast;
