import Vue from 'vue';
import ShopeeOtpInput from '../index';
import { createInstance, destroyInstance } from '@/test/utils';

Vue.use(ShopeeOtpInput);

const createOtpInput = (props) => {
  props = props || {};
  return createInstance(ShopeeOtpInput, props, true);
};

describe('otp-input.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });

  it('should render correct', () => {
    vm = createOtpInput();
    expect(vm.$el.classList.contains('.shopee-otp-input')).to.exist;
    expect(vm.$el.querySelectorAll('.shopee-otp-input-item').length).to.equal(6);
  });

  it('length', () => {
    vm = createOtpInput({
      length: 4
    });
    expect(vm.$el.classList.contains('.shopee-otp-input')).to.exist;
    expect(vm.$el.querySelectorAll('.shopee-otp-input-item').length).to.equal(4);
  });

  it('disabled', () => {
    vm = createOtpInput({
      disabled: true
    });
    expect(vm.$el.querySelector('.shopee-input__inner').classList.contains('disabled')).to.be.true;
  });

  it('theme box', () => {
    vm = createOtpInput({
      theme: 'box'
    });
    expect(vm.$el.classList.contains('shopee-otp-input--box')).to.be.true;
  });

  it('watch password', (done) => {
    vm = createOtpInput({
      length: 2
    });
    vm.valueArray = [1,2];
    setTimeout(() => {
      expect(vm.password).to.equal('12');
      expect(vm.completed).to.be.true;
      vm.valueArray = [1];
      setTimeout(() => {
        expect(vm.password).to.equal('1');
        expect(vm.completed).to.be.false;
      });
      done();
    });
  });

  it('reset function', (done) => {
    vm = createOtpInput({
      length: 2
    });
    vm.valueArray = [1,2];
    vm.reset();
    setTimeout(() => {
      expect(vm.valueArray).to.eql(new Array(2));
      done();
    });
  });

  it('handle input', (done) => {
    vm = createOtpInput({
      length: 2
    });
    let comp = new Array(2);
    vm.onInput({data: 1}, 0);
    setTimeout(() => {
      comp[0] = 1;
      expect(vm.valueArray).to.eql(comp);
      vm.onInput({data: 2}, 1);
      setTimeout(() => {
        comp[1] = 2;
        expect(vm.valueArray).to.eql(comp);
        done();
      });
    });
  });

  it('handle move', (done) => {
    vm = createOtpInput({
    });
    vm.onMove('left',1);
    setTimeout(() => {
      expect(vm.$refs.otpInput[0].$refs.input).to.eql(document.activeElement);
      vm.valueArray = ['1','2','3','4','5','6'];
      vm.onEnter();
      done();
    });
  });

  it('handle paste', (done) => {
    vm = createOtpInput({
    });
    let dt = null;
    try {
      dt = new DataTransfer();
    } catch (e) {}
    let evt = new ClipboardEvent('paste',{clipboardData: dt});
    evt.clipboardData.setData('text/plain','123456');
    vm.onPaste(evt,0);
    setTimeout(() => {
      expect(vm.valueArray).to.eql(['1','2','3','4','5','6']);
      done();
    });
  });

  it('handle delete', (done) => {
    vm = createOtpInput({
    });
    vm.valueArray = ['1','2','3','4','5','6'];
    vm.onDelete({
      target: {
        value: null
      }
    }, 6);
    setTimeout(() => {
      expect(vm.valueArray).to.eql(['1','2','3','4','5','']);
      done();
    });
  });
});
