import Vue from 'vue';
import ShopeePopover from '../index';
import { createElement, destroyInstance } from '@/test/utils';

Vue.use(ShopeePopover);

const createPopover = (props = {}) => {
  const vm = new Vue({
    template: `<shopee-popover ref="popover" v-bind="props">
      <span>Click</span>
      <div slot="content">test</div>
    </shopee-popover>`,
    data() {
      return {
        props,
      };
    }
  }).$mount(createElement());
  return vm.$refs.popover;
};

const defaultDelay = 200;

describe('popover.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });

  it('should render correct', () => {
    vm = createPopover();
    expect(vm.$el.classList.contains('shopee-popover')).to.be.true;
  });

  it('should show when clicked', done => {
    vm = createPopover();
    vm.$refs.popperRef.click();
    setTimeout(() => {
      expect(vm.$refs.popper.$el.style.display).to.equals('');
      done();
    }, defaultDelay);
  });

  it('should hide when clicked again', done => {
    vm = createPopover();
    vm.$refs.popperRef.click();
    setTimeout(() => {
      expect(vm.$refs.popper.$el.style.display).to.equals('');
      vm.$refs.popperRef.click();
      setTimeout(() => {
        expect(vm.$refs.popper.$el.style.display).to.equals('none');
        done();
      }, defaultDelay + 250);
    }, defaultDelay);
  });

  it('should hide when clicked outside', done => {
    vm = createPopover();
    vm.$refs.popperRef.click();
    setTimeout(() => {
      document.body.click();
      setTimeout(() => {
        expect(vm.$refs.popper.$el.style.display).to.equals('none');
        done();
      }, defaultDelay + 250);
    }, defaultDelay);
  });

  it('should show when mouseenter', done => {
    vm = createPopover({
      trigger: 'hover'
    });
    vm.$refs.popperRef.dispatchEvent(new Event('mouseenter'));
    setTimeout(() => {
      expect(vm.$refs.popper.$el.style.display).to.equals('');
      done();
    }, defaultDelay);
  });

  it('should hide when mouseleave', done => {
    vm = createPopover({
      trigger: 'hover'
    });
    vm.$refs.popperRef.dispatchEvent(new Event('mouseenter'));
    setTimeout(() => {
      vm.$refs.popperRef.dispatchEvent(new Event('mouseleave'));
      setTimeout(() => {
        expect(vm.$refs.popper.$el.style.display).to.equals('none');
        done();
      }, defaultDelay + 250);
    }, defaultDelay);
  });

  it('should show when mousedown', done => {
    vm = createPopover({
      trigger: 'focus'
    });
    vm.$refs.popperRef.dispatchEvent(new Event('mousedown'));
    setTimeout(() => {
      expect(vm.$refs.popper.$el.style.display).to.equals('');
      done();
    }, defaultDelay);
  });

  it('should hide when mouseup', done => {
    vm = createPopover({
      trigger: 'focus'
    });
    vm.$refs.popperRef.dispatchEvent(new Event('mousedown'));
    setTimeout(() => {
      vm.$refs.popperRef.dispatchEvent(new Event('mouseup'));
      setTimeout(() => {
        expect(vm.$refs.popper.$el.style.display).to.equals('none');
        done();
      }, defaultDelay + 250);
    }, defaultDelay);
  });

  it('should toggle visible when value changed', done => {
    vm = createPopover({
      value: true
    });
    setTimeout(() => {
      expect(vm.$refs.popper.$el.style.display).to.equals('');
      vm.$parent.$data.props.value = false;
      setTimeout(() => {
        expect(vm.$refs.popper.$el.style.display).to.equals('none');
        done();
      }, defaultDelay + 250);
    }, defaultDelay);
  });

  it('should not hide on click outside when value set', done => {
    vm = createPopover({
      value: true
    });
    vm.$refs.popperRef.click();
    setTimeout(() => {
      document.body.click();
      setTimeout(() => {
        expect(vm.$refs.popper.$el.style.display).to.equals('');
        done();
      }, defaultDelay);
    }, defaultDelay);
  });

  it('should disabled mouseleave and mouseenter when value set', done => {
    vm = createPopover({
      trigger: 'hover',
      value: true
    });
    vm.$refs.popperRef.dispatchEvent(new Event('mouseenter'));
    setTimeout(() => {
      vm.$refs.popperRef.dispatchEvent(new Event('mouseleave'));
      setTimeout(() => {
        expect(vm.$refs.popper.$el.style.display).to.equals('');
        done();
      }, defaultDelay);
    }, defaultDelay);
  });

  it('should disabled mousedown and mouseup when value set', done => {
    vm = createPopover({
      trigger: 'focus',
      value: true
    });
    vm.$refs.popperRef.dispatchEvent(new Event('mousedown'));
    setTimeout(() => {
      vm.$refs.popperRef.dispatchEvent(new Event('mouseup'));
      setTimeout(() => {
        expect(vm.$refs.popper.$el.style.display).to.equals('');
        done();
      }, defaultDelay);
    }, defaultDelay);
  });

  it('should popperClasses compute correct', () => {
    vm = createPopover({
      popperClass: 'test'
    });
    let popper = vm.$refs.popper;
    expect(popper.$el.classList.contains('test')).to.be.true;
    destroyInstance(vm);
    vm = createPopover({
      popperClass: ['test']
    });
    popper = vm.$refs.popper;
    expect(popper.$el.classList.contains('test')).to.be.true;
  });

  it('should destory correct', () => {
    vm = createPopover({});
    vm.removeEvent();
    expect(vm.trigger).to.equals('click');
    destroyInstance(vm);
    vm = createPopover({
      trigger: 'hover'
    });
    vm.removeEvent();
    expect(vm.trigger).to.equals('hover');
    destroyInstance(vm);
    vm = createPopover({
      trigger: 'focus'
    });
    vm.removeEvent();
    expect(vm.trigger).to.equals('focus');
  });
});
