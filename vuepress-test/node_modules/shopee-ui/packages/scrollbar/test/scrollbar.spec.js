import Vue from 'vue';
import ShopeeScrollbar from '../index';
import { destroyInstance, createElement } from '@/test/utils';

Vue.use(ShopeeScrollbar);

const scrollBarWidth = 20;

const createScrollbar = (props = {}) => {
  const vm = new Vue({
    template: `<shopee-scrollbar ref="scrollbar" v-bind="props" :style="{width: width + 'px', height: height + 'px'}">
                  <div class="content" :style="{width: contentWidth + 'px', height: contentHeight + 'px'}"></div>
                </shopee-scrollbar>`,
    data() {
      return {
        props,
        width: 20,
        height: 20,
        contentWidth: 100,
        contentHeight: 100,
      };
    }
  }).$mount(createElement());
  return vm.$refs.scrollbar;
};

describe('scrollbar.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });

  it('should render correct', () => {
    vm = createScrollbar();
    expect(vm.$el.classList.contains('.shopee-scrollbar')).to.exist;
  });

  it('should hidden correct', () => {
    vm = createScrollbar({
      hidden: true
    });
    expect(!!vm.$el.querySelector('.vertical')).to.be.false;
    expect(!!vm.$el.querySelector('.horizontal')).to.be.false;
  });

  it('should set vertical correct', () => {
    vm = createScrollbar({
      layout: 'vertical'
    });
    expect(!!vm.$el.querySelector('.vertical')).to.be.true;
    expect(!vm.$el.querySelector('.horizontal')).to.be.true;
  });

  it('should set horizontal correct', () => {
    vm = createScrollbar({
      layout: 'horizontal'
    });
    expect(!!vm.$el.querySelector('.horizontal')).to.be.true;
    expect(!vm.$el.querySelector('.vertical')).to.be.true;
  });

  it('should computed wrapperStyle correct', () => {
    vm = createScrollbar({
      manual: true
    });
    vm.heightSize = 1;
    vm.widthSize = 1;
    expect(vm.fixedStyle.wrapper).to.eql({
      overflow: 'hidden',
      marginRight: `-${scrollBarWidth}px`,
      paddingRight: `${scrollBarWidth}px`,
      marginBottom: `-${scrollBarWidth}px`,
      paddingBottom: `${scrollBarWidth}px`,
    });
    expect(vm.fixedStyle.content).to.eql({
      marginRight: `-${scrollBarWidth}px`,
      paddingRight: `${scrollBarWidth}px`,
      marginBottom: `-${scrollBarWidth}px`,
      paddingBottom: `${scrollBarWidth}px`,
    });
  });

  it('should update correct', (done) => {
    vm = createScrollbar();
    const wrapper = vm.$refs.wrapper;
    vm.onScroll();
    setTimeout(() => {
      const offsetY = wrapper.scrollTop * (wrapper.clientHeight - vm.heightSize) / (wrapper.scrollHeight - wrapper.clientHeight);
      const offsetX = wrapper.scrollLeft * (wrapper.clientWidth - vm.widthSize) / (wrapper.scrollWidth - wrapper.clientWidth);
      expect(vm.offsetY).to.eql(offsetY);
      expect(vm.offsetX).to.eql(offsetX);
      done();
    });
  });

  it('should bar wrapper correct', () => {
    vm = createScrollbar();
    const verticalBar = vm.$refs.verticalBar;
    expect(verticalBar.wrapper).to.equal(vm.$refs.wrapper);
  });

  it('should bar onMouseover correct', (done) => {
    vm = createScrollbar();
    const verticalBar = vm.$refs.verticalBar;
    verticalBar.onMouseover();
    setTimeout(() => {
      expect(verticalBar.visible).to.equal(true);
      done();
    },600);
  });

  it('should bar onMouseleave correct', (done) => {
    vm = createScrollbar();
    const verticalBar = vm.$refs.verticalBar;
    verticalBar.onMouseleave();
    setTimeout(() => {
      expect(verticalBar.visible).to.equal(false);
      done();
    },600);
  });

  it('should bar mouse event correct', () => {
    vm = createScrollbar();
    const verticalBar = vm.$refs.verticalBar;
    const horizontalBar = vm.$refs.horizontalBar;
    const mousedownEvent = new MouseEvent('mousedown',{
      clientY: 0,
      clientX: 0
    });
    const mousemoveEvent = new MouseEvent('mousemove',{
      clientY: 10,
      clientX: 10
    });
    const mouseupEvent = new MouseEvent('mouseup',{
      clientY: 20,
      clientX: 20
    });
    verticalBar.$el.querySelector('.shopee-scrollbar__thumb').dispatchEvent(mousedownEvent);
    horizontalBar.$el.querySelector('.shopee-scrollbar__thumb').dispatchEvent(mousedownEvent);
    expect(verticalBar.isThumbDrag).to.equal(true);
    expect(horizontalBar.isThumbDrag).to.equal(true);
    document.dispatchEvent(mousemoveEvent);
    document.dispatchEvent(mouseupEvent);
    expect(verticalBar.isThumbDrag).to.equal(false);
    expect(horizontalBar.isThumbDrag).to.equal(false);
  });
});
