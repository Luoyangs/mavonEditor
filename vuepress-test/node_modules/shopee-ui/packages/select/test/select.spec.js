import Vue from 'vue';
import ShopeeSelect from '../index';
import { destroyInstance, createElement, triggerSVGClick, dispatchKeyboardEvent } from '@/test/utils';

Vue.use(ShopeeSelect);

const createSimpleSelect = (options = {}) => {
  const {filterable, disabled, clearable, filterMethod} = options;
  return new Vue({
    template: `<shopee-select ref="select" v-model="value" :filter-method="filterMethod" :filterable="filterable" :disabled="disabled" :clearable="clearable">
        <shopee-option v-for="(option, index) in options" :key="index" :value="option.value">{{option.label}}</shopee-option>
      </shopee-select>`,
    data() {
      return {
        value: -1,
        filterable,
        disabled,
        clearable,
        filterMethod,
        options: [{
          value: 1,
          label: 'option1'
        }, {
          value: 2,
          label: 'option2'
        }, {
          value: 3,
          label: 'option3'
        }]
      };
    }
  }).$mount(createElement());
};

describe('select.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });
  it('should render correct', () => {
    vm = createSimpleSelect();
    expect(vm.$el.classList.contains('shopee-select')).to.be.true;
  });

  it('should triggle visible when input clicked', done => {
    vm = createSimpleSelect();
    vm.$el.querySelector('.shopee-selector').click();
    const popper = vm.$refs.select.$refs.popper;
    setTimeout(() => {
      expect(popper.$el.style.display).to.equals('');
      vm.$el.querySelector('.shopee-selector').click();
      setTimeout(() => {
        expect(popper.$el.style.display).to.equals('none');
        done();
      }, 500);
    });
  });

  it('should select current value', done => {
    vm = createSimpleSelect();
    vm.$el.querySelector('.shopee-selector').click();
    const popper = vm.$refs.select.$refs.popper;
    setTimeout(() => {
      popper.$el.querySelector('.shopee-select__menu').querySelector('.shopee-option').click();
      setTimeout(() => {
        expect(vm.$data.value).to.equals(1);
        done();
      });
    });
  });

  it('select disabled', done => {
    vm = createSimpleSelect({disabled: true});
    vm.$el.querySelector('.shopee-selector').click();
    const popper = vm.$refs.select.$refs.popper;
    setTimeout(() => {
      expect(popper.$el.style.display).to.equals('none');
      done();
    });
  });

  it('option disabled', done => {
    vm = new Vue({
      template: `<shopee-select v-model="value" ref="select">
        <shopee-option v-for="(option, index) in options" :key="index" :value="option.value" disabled>{{option.label}}</shopee-option>
      </shopee-select>`,
      data() {
        return {
          value: -1,
          options: [{
            value: 1,
            label: 'option1'
          }, {
            value: 2,
            label: 'option2'
          }, {
            value: 3,
            label: 'option3'
          }]
        };
      }
    }).$mount(createElement());
    vm.$el.querySelector('.shopee-selector').click();
    const popper = vm.$refs.select.$refs.popper;
    setTimeout(() => {
      popper.$el.querySelector('.shopee-select__menu').querySelector('.shopee-option').click();
      setTimeout(() => {
        expect(vm.$data.value).to.equals(-1);
        done();
      });
    });
  });

  it('clearable', done => {
    vm = vm = createSimpleSelect({clearable: true});
    vm.$el.querySelector('.shopee-selector').click();
    const popper = vm.$refs.select.$refs.popper;
    setTimeout(() => {
      popper.$el.querySelector('.shopee-select__menu').querySelector('.shopee-option').click();
      setTimeout(() => {
        triggerSVGClick(vm.$el.querySelector('.shopee-selector__clear-btn'));
        setTimeout(() => {
          expect(vm.$data.value).to.be.undefined;
          done();
        });
      });
    });
  });

  it('filterable', done => {
    vm = vm = vm = createSimpleSelect({filterable: true});
    vm.$refs.select.$data.query = '1';
    setTimeout(() => {
      expect(Array.prototype.filter.call(vm.$el.querySelectorAll('.shopee-option'), item => {
        if (item.style.display !== 'none') {
          return true;
        }
        return false;
      }).length).to.equals(1);
      done();
    });
  });

  it('filter method', done => {
    let filterMethodCalled = false;
    vm = createSimpleSelect({filterable: true, filterMethod: (query, label) => {
      filterMethodCalled = true;
      return label.indexOf(query) !== -1;
    }});
    vm.$refs.select.$data.query = '1';
    setTimeout(() => {
      expect(filterMethodCalled).to.be.true;
      done();
    });
  });

  it('clear when filterable', done => {
    vm = createSimpleSelect({filterable: true, clearable: true});
    vm.$refs.select.$data.query = '1';
    const popper = vm.$refs.select.$refs.popper;
    setTimeout(() => {
      popper.$el.querySelector('.shopee-select__menu').querySelector('.shopee-option').click();
      setTimeout(() => {
        triggerSVGClick(vm.$el.querySelector('.shopee-selector__clear-btn'));
        setTimeout(() => {
          expect(vm.$data.value).to.be.undefined;
          expect(vm.$refs.select.$data.query).to.equals(null);
          done();
        });
      });
    });
  });

  it('keyboard support', done => {
    vm = new Vue({
      template: `<shopee-select v-model="value" ref="select">
        <shopee-option :value="0" disabled>option0</shopee-option>
        <shopee-option v-for="(option, index) in options" :key="index" :value="option.value">{{option.label}}</shopee-option>
      </shopee-select>`,
      data() {
        return {
          value: -1,
          options: [{
            value: 1,
            label: 'option1'
          }, {
            value: 2,
            label: 'option2'
          }, {
            value: 3,
            label: 'option3'
          }]
        };
      }
    }).$mount(createElement());

    let input = vm.$el.querySelector('.shopee-selector');
    // arrow down
    dispatchKeyboardEvent(input, 40);

    const popper = vm.$refs.select.$refs.popper;
    setTimeout(() => {
      expect(popper.$el.style.display).to.equals('');
      // arrow down
      dispatchKeyboardEvent(input, 40);
      setTimeout(() => {
        expect(vm.$refs.select.activeIndex).to.equal(1);
        // arrow up
        dispatchKeyboardEvent(input, 38);
        setTimeout(() => {
          expect(vm.$refs.select.activeIndex).to.equal(3);
          // enter
          dispatchKeyboardEvent(input, 13);
          setTimeout(() => {
            expect(vm.value).to.equal(3);
            done();
          });
        });
      });
    });
  });
});
