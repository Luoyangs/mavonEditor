import Vue from 'vue';
import ShopeeTree from '../index';
import { createElement, destroyInstance } from '@/test/utils';

Vue.use(ShopeeTree);

const treeData = [{
  label: '1',
  id: 1,
  children: [{
    label: '11',
    id: 11
  }, {
    label: '12',
    id: 22
  }]
}, {
  label: '2',
  id: 2
}, {
  label: '3',
  id: 3,
  children: [{
    label: '31',
    id: 31,
    children: [{
      label: '311',
      id: 311
    }, {
      label: '312',
      id: 312
    }]
  }, {
    label: '32',
    id: 32
  }]
}];


const createSimpleTree = (props = {}) => {
  const isClicked = false;
  const isChanged = false;
  const isExpanded = false;
  const isCollapsed = false;
  const style = {width: '160px'};
  return new Vue({
    template: '<shopee-tree :style="style" ref="tree" :data="treeData" v-bind="props" @node-click="handleClick" @current-change="handleChange" @node-expand="handleExpand" @node-collapse="handleCollapse"></shopee-tree>',
    data() {
      return {
        props,
        treeData: props && props.treeData || treeData,
        renderContent: props && props.renderContent || null,
        style,
        isClicked,
        isChanged,
        isExpanded,
        isCollapsed
      };
    },
    methods: {
      handleClick() {
        this.isClicked = true;
      },
      handleChange() {
        this.isChanged = true;
      },
      handleExpand() {
        this.isExpanded = true;
      },
      handleCollapse() {
        this.isCollapsed = true;
      }
    }
  }).$mount(createElement());
};

describe('tree.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });

  it('should render correct', () => {
    vm = createSimpleTree();
    expect(vm.$el.classList.contains('shopee-tree')).to.be.true;
  });

  it('should watch defaultExpandedKeys correct', (done) => {
    vm = createSimpleTree({
      defaultExpandedKeys: []
    });
    vm.props.defaultExpandedKeys = [1];
    setTimeout(() => {
      expect(vm.$refs.tree.store.defaultExpandedKeys).to.eql([1]);
      done();
    });
  });

  it('should watch data correct', (done) => {
    vm = createSimpleTree({
      treeData: []
    });
    expect(vm.$refs.tree.root.data).to.eql([]);
    vm.treeData = treeData;
    setTimeout(() => {
      expect(vm.$refs.tree.root.data).to.eql(treeData);
      done();
    });
  });

  it('should expand&select default keys correct', () => {
    vm = createSimpleTree({
      nodeKey: 'id',
      defaultExpandedKeys: [1],
      currentNodeKey: 1,
    });
    const tree = vm.$refs.tree;
    const node = tree.$el.querySelectorAll('[role=treeitem]')[0].querySelector('.shopee-tree-node__content');
    expect(node.classList.contains('is-expanded')).to.be.true;
    expect(node.classList.contains('is-current')).to.be.true;
  });

  it('should expand all correct', () => {
    vm = createSimpleTree({
      defaultExpandAll: true
    });
    const tree = vm.$refs.tree;
    const node = tree.$el.querySelectorAll('.shopee-tree-node__content');
    node.forEach((item) => {
      expect(item.classList.contains('is-expanded')).to.be.true;
    });
  });

  it('should auto expand parent correct', () => {
    vm = createSimpleTree({
      nodeKey: 'id',
      defaultExpandedKeys: [31],
      autoExpandParent: true
    });
    const tree = vm.$refs.tree;
    const parent = tree.$el.querySelectorAll('.is-root')[2];
    const node = tree.$el.querySelectorAll('[role=treeitem]')[2].querySelectorAll('[role=treeitem]')[0].querySelector('.shopee-tree-node__content');
    expect(parent.classList.contains('is-expanded')).to.be.true;
    expect(node.classList.contains('is-expanded')).to.be.true;
  });

  it('should show accordion style correct', (done) => {
    vm = createSimpleTree({
      accordion: true
    });
    const tree = vm.$refs.tree;
    const node1 = tree.$el.querySelectorAll('.is-root')[0];
    const node2 = tree.$el.querySelectorAll('.is-root')[2];
    expect(node1.classList.contains('is-expanded')).to.be.false;
    expect(node2.classList.contains('is-expanded')).to.be.false;
    setTimeout(() => {
      node1.click();
      setTimeout(() => {
        expect(node1.classList.contains('is-expanded')).to.be.true;
        expect(node2.classList.contains('is-expanded')).to.be.false;
        node2.click();
        setTimeout(() => {
          expect(node1.classList.contains('is-expanded')).to.be.false;
          expect(node2.classList.contains('is-expanded')).to.be.true;
          done();
        });
      });
    });
  });

  it('should emit event correct', (done) => {
    vm = createSimpleTree();
    const tree = vm.$refs.tree;
    const node = tree.$el.querySelectorAll('[role=treeitem]')[0];
    node.click();
    setTimeout(() => {
      expect(vm.$data.isClicked).to.equals(true);
      expect(vm.$data.isChanged).to.equals(true);
      expect(vm.$data.isExpanded).to.equals(true);
      node.click();
      setTimeout(() => {
        expect(vm.$data.isCollapsed).to.equals(true);
        done();
      });
    });
  });

  it('should render content correct', () => {
    vm = createSimpleTree({
      renderContent(h, { node }) {
        const style = { paddingLeft: '20px' };
        return (
          <div style={style}>
            <span>{node.label + 'render'}</span>
          </div>);
      },
      treeData
    });
    const tree = vm.$refs.tree;
    const node = tree.$el.querySelectorAll('[role=treeitem]')[0].querySelector('span');
    expect(node.innerHTML).to.equal('1render');
  });

  it('should handleMouseEnter correct', (done) => {
    vm = createSimpleTree({
      nodeKey: 'id'
    });
    const tree = vm.$refs.tree;
    const node = tree.$children[0];
    const ele = node.$el.querySelector('.shopee-tree-node__content');
    ele.dispatchEvent(new Event('mouseenter'));
    setTimeout(() => {
      expect(node.isHover).to.be.true;
      expect(node.isTextOverflow).to.be.false;
      done();
    });
  });

  it('should handleChildNodeExpand correct', (done) => {
    vm = createSimpleTree({
      nodeKey: 'id'
    });
    const tree = vm.$refs.tree;
    const node = tree.$children[0];
    node.handleChildNodeExpand();
    setTimeout(() => {
      expect(vm.isExpanded).to.be.true;
      done();
    });
  });
});
