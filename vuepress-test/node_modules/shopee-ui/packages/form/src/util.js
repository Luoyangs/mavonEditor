import { isObject, isArray, scrollToView, mergeDeep } from 'shopee-ui/lib/base';

/**
 * get the specified model in form model by path
 * @param {Object} model the model
 * @param {String} path the path
 * @return {*}
 */
export function getModelByPath(model, path) {
  path = path.replace(/\[(\w+)\]/g, '.$1');
  path = path.replace(/(\.\$each)?\.(\d+)/g, '.$2');
  path = path.replace(/^\./, '');

  const keyArray = path.split('.');

  let parent = null;
  let value = model;
  keyArray.forEach(key => {
    parent = value;
    value = value[key];
  });
  return {
    value,
    parent
  };
}

/**
 * get the specified rule in form rules by path
 * @param {Object} rules the rules
 * @param {String} path the path
 * @return {*}
 */
export function getRuleByPath(rules, path) {
  path = path.replace(/\[(\w+)\]/g, '.$1');
  path = path.replace(/(\.\$each)?\.\d+/g, '.$each');
  path = path.replace(/^\./, '');

  const keyArray = path.split('.');

  let value = rules;
  keyArray.forEach(key => {
    if (isArray(value)) {
      value = value.find(n => n[key])[key];
    } else if (isObject(value)) {
      value = value[key];
    }
  });
  return value;
}

/**
 * get the specified fields by props
 * @param {Object} fields the total fields
 * @param {Array} props the props
 * @return {*}
 */
export function getFieldsByPaths(fields, props) {
  const formatPath = path => {
    path = path.replace(/\[(\w+)\]/g, '.$1');
    path = path.replace(/(\.\$each)?\.(\d+)/g, '.$2');
    path = path.replace(/^\./, '');
    return path;
  };

  props = isArray(props) ? props : [props];
  props = props.map(n => formatPath(n));
  let fieldsRs = [];
  props.forEach(propName => {
    fieldsRs = fieldsRs.concat(fields.filter(field => {
      const prop = formatPath(field.prop);
      return prop.indexOf(propName) === 0;
    }));
  });
  return fieldsRs;
}


/**
 * get the specified fields by props
 * @param {Array} fields the total fields
 * @param {Object} errorHandler
 * @return void
 */
export function scrollToError(fields, errorHandler) {
  if (fields.length && errorHandler) {
    let defaultErrorHandler = {
      scrollToError: true,
      scrollConfig: {},
      getTarget: (invalidFields) => invalidFields[0]
    };
    mergeDeep(defaultErrorHandler, errorHandler);
    if (defaultErrorHandler.scrollToError) {
      const target = defaultErrorHandler.getTarget(fields);
      const targetEl = (target && target.$el) || null;
      targetEl && scrollToView(targetEl, defaultErrorHandler.scrollConfig);
    }
  }
}
