import Vue from 'vue';
import ShopeeForm from '../index';
import ShopeeInput from '../../input';
import { createElement, destroyInstance } from '@/test/utils';
import { required } from 'vuelidate/lib/validators';

Vue.use(ShopeeForm);
Vue.use(ShopeeInput);

const createSimpleFormItem = (props = {}) => {
  return new Vue({
    template: `
      <shopee-form ref="form" :model="form" :rules="rules">
        <shopee-form-item ref="field" prop="input" v-bind="props">
          <shopee-input v-model="form.input"></shopee-input>
        </shopee-form-item>
      </shopee-form>`,
    data() {
      return {
        props,
        form: {
          input: ''
        },
        rules: {
          input: [
            { required, message: 'Name required' }
          ]
        }
      };
    }
  }).$mount(createElement());
};

describe('form-item.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });

  describe('basic', () => {
    it('should render correctly', () => {
      vm = createSimpleFormItem();
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      expect(vm.$el.querySelector('.shopee-form-item')).to.be.exist;
    });

    it('label', () => {
      vm = createSimpleFormItem({
        label: 'Input Name'
      });
      expect(vm.$el.querySelector('.shopee-form-item')).to.be.exist;
      expect(vm.$el.querySelector('.shopee-form-item__label')).to.be.exist;
      expect(vm.$el.querySelector('.shopee-form-item__label').textContent.trim()).to.equals('Input Name');
    });

    it('for', () => {
      vm = createSimpleFormItem({
        for: 'name'
      });
      expect(vm.$el.querySelector('.shopee-form-item')).to.be.exist;
      expect(vm.$el.querySelector('.shopee-form-item__label')).to.be.exist;
      expect(vm.$el.querySelector('.shopee-form-item__label').getAttribute('for')).to.equals('name');
    });

    it('size', () => {
      vm = createSimpleFormItem({
        size: 'small'
      });
      expect(vm.$el.querySelector('.shopee-form-item')).to.be.exist;
      expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--small')).to.be.true;
    });
  });

  describe('validate', () => {
    it('should validate correctly', done => {
      vm = createSimpleFormItem();
      expect(vm.$el.querySelector('.shopee-form-item')).to.be.exist;
      vm.$refs.field.validate('', valid => {
        expect(valid).to.not.true;
        setTimeout(() => {
          expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.be.true;
          expect(vm.$el.querySelector('.shopee-form-item__error')).to.be.exist;
          done();
        }, 100);
      });
    });

    it('should validate correctly: focus|blur', done => {
      vm = createSimpleFormItem();
      expect(vm.$el.querySelector('.shopee-form-item')).to.be.exist;
      vm.$refs.field.validate('', valid => {
        expect(valid).to.not.true;
        setTimeout(() => {
          expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.be.true;
          expect(vm.$el.querySelector('.shopee-form-item__error')).to.be.exist;
          vm.$el.querySelector('input').focus();
          setTimeout(() => {
            expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.not.true;
            expect(vm.$el.querySelector('.shopee-form-item__error')).to.not.exist;
            vm.$el.querySelector('input').blur();
            setTimeout(() => {
              expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.be.true;
              expect(vm.$el.querySelector('.shopee-form-item__error')).to.be.exist;
              done();
            }, 100);
          }, 300);
        }, 100);
      });
    });

    it('should validate correctly: change', done => {
      vm = createSimpleFormItem();
      expect(vm.$el.querySelector('.shopee-form-item')).to.be.exist;
      vm.$refs.field.validate('', valid => {
        expect(valid).to.not.true;
        setTimeout(() => {
          expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.be.true;
          expect(vm.$el.querySelector('.shopee-form-item__error')).to.be.exist;
          // can not dispatch input event in js
          vm.form.input = 'abc';
          vm.$refs.field.onFieldChange();
          setTimeout(() => {
            expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.not.true;
            expect(vm.$el.querySelector('.shopee-form-item__error')).to.not.exist;
            done();
          }, 300);
        }, 100);
      });
    });

    it('clearValidate', done => {
      vm = createSimpleFormItem();
      expect(vm.$el.querySelector('.shopee-form-item')).to.be.exist;
      vm.$el.querySelector('input').focus();
      setTimeout(() => {
        vm.$el.querySelector('input').blur();
        setTimeout(() => {
          expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.be.true;
          vm.$refs.field.clearValidate();
          setTimeout(() => {
            expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.not.true;
            done();
          }, 100);
        }, 100);
      });
    });

    it('showMessage', done => {
      vm = createSimpleFormItem({
        showMessage: false
      });
      expect(vm.$el.querySelector('.shopee-form-item')).to.be.exist;
      vm.$refs.form.validate(valid => {
        expect(valid).to.not.true;
        setTimeout(() => {
          expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.be.true;
          expect(vm.$el.querySelector('.shopee-form-item__error')).to.not.exist;
          done();
        }, 100);
      });
    });

    it('field rules', done => {
      vm = createSimpleFormItem({
        rules: { required, message: 'Please input name.' }
      });
      expect(vm.$el.querySelector('.shopee-form-item')).to.be.exist;
      vm.$refs.form.validate(valid => {
        expect(valid).to.not.true;
        setTimeout(() => {
          expect(vm.$refs.field.errorMessage).to.equals('Please input name.');
          done();
        }, 100);
      });
    });
  });
});
