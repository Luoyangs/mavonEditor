import Vue from 'vue';
import ShopeeForm from '../index';
import ShopeeInput from '../../input';
import ShopeeSelect from '../../select';
import ShopeeDatePicker from '../../date-picker';
import ShopeeSwitch from '../../switch';
import ShopeeCheckbox from '../../checkbox';
import ShopeeRadio from '../../radio';
import { createElement, destroyInstance } from '@/test/utils';
import { required, minLength, sameAs, not } from 'vuelidate/lib/validators';

Vue.use(ShopeeForm);
Vue.use(ShopeeInput);
Vue.use(ShopeeSelect);
Vue.use(ShopeeDatePicker);
Vue.use(ShopeeSwitch);
Vue.use(ShopeeCheckbox);
Vue.use(ShopeeRadio);

const createSimpleForm = (props = {}) => {
  const {inline, labelPosition, size} = props;
  return new Vue({
    template: `
      <shopee-form ref="form" :model="form" :inline="inline" :label-position="labelPosition" :size="size">
        <shopee-form-item label="Input">
          <shopee-input v-model="form.input"></shopee-input>
        </shopee-form-item>
        <shopee-form-item label="Select">
          <shopee-select v-model="form.select" placeholder="select">
            <shopee-option value="s1">Option one</shopee-option>
            <shopee-option value="s2">Option two</shopee-option>
            <shopee-option value="s3">Option three</shopee-option>
          </shopee-select>
        </shopee-form-item>
        <shopee-form-item label="DatePicker">
          <shopee-date-picker type="date" v-model="form.date"></shopee-date-picker>
        </shopee-form-item>
        <shopee-form-item label="Switch">
          <shopee-switch v-model="form.switch"></shopee-switch>
        </shopee-form-item>
        <shopee-form-item label="Checkbox">
          <shopee-checkbox-group v-model="form.checkbox">
            <shopee-checkbox>Checkbox one</shopee-checkbox>
            <shopee-checkbox>Checkbox two</shopee-checkbox>
            <shopee-checkbox>Checkbox three</shopee-checkbox>
            <shopee-checkbox>Checkbox four</shopee-checkbox>
          </shopee-checkbox-group>
        </shopee-form-item>
        <shopee-form-item label="Radio">
          <shopee-radio-group v-model="form.radio">
            <shopee-radio>Radio one</shopee-radio>
            <shopee-radio>Radio two</shopee-radio>
          </shopee-radio-group>
        </shopee-form-item>
        <shopee-form-item label="Text">
          <shopee-input type="textarea" v-model="form.text"></shopee-input>
        </shopee-form-item>
      </shopee-form>`,
    data() {
      return {
        inline,
        labelPosition,
        size,
        form: {
          input: '',
          select: '',
          date: '',
          switch: false,
          checkbox: [],
          radio: '',
          text: ''
        }
      };
    }
  }).$mount(createElement());
};

const createValidateForm = (props = {}) => {
  const {rules, showMessage, validateTrigger} = props;
  return new Vue({
    template: `
      <shopee-form ref="form" :model="form" :rules="rules" :show-message="showMessage" :validate-trigger="validateTrigger">
        <shopee-form-item prop="name" ref="nameField">
          <shopee-input v-model="form.name"></shopee-input>
        </shopee-form-item>
        <shopee-form-item prop="age" ref="ageField">
          <shopee-input v-model.number="form.age"></shopee-input>
        </shopee-form-item>
      </shopee-form>`,
    data() {
      return {
        showMessage,
        validateTrigger,
        form: {
          name: '',
          age: ''
        },
        rules: rules || {
          name: [
            { required, message: 'Please input name' }
          ],
          age: [
            { required, message: 'Please input age' }
          ]
        }
      };
    }
  }).$mount(createElement());
};

const createCollectiveValidateForm = (rules) => {
  return new Vue({
    template: `
    <shopee-form ref="form" :model="form" :rules="rules">
      <template v-for="(user, index) in form.users">
        <shopee-form-item :prop="'users[' + index + '].name'" ref="nameField">
          <shopee-input v-model="user.name"></shopee-input>
        </shopee-form-item>
        <shopee-form-item :prop="'users[' + index + '].nickname'" ref="nicknameField">
          <shopee-input v-model="user.nickname"></shopee-input>
        </shopee-form-item>
      </template>
      <shopee-form-item prop="users" ref="usersField">
        <button ref="addBtn" @click="addStudent">add</button>
      </shopee-form-item>
    </shopee-form>`,
    data() {
      return {
        form: {
          users: [{
            name: '',
            nickname: ''
          }]
        },
        rules
      };
    },
    methods: {
      addStudent() {
        this.form.users.push({
          name: '',
          nickname: ''
        });
      }
    }
  }).$mount(createElement());
};

const collectiveValidateRules = {
  users: [
    {
      $each: {
        name: [
          { required, message: 'Please input name', trigger: 'blur' }
        ],
        nickname: [
          { required, message: 'Please input nickname', trigger: 'blur' },
          { notSameAs: not(sameAs('name')), message: 'Nickname can not be same', trigger: 'blur' }
        ]
      }
    }
  ]
};

describe('form.vue', () => {
  let vm;

  afterEach(() => {
    destroyInstance(vm);
  });

  describe('basic', () => {
    it('should render correctly', () => {
      vm = createSimpleForm();
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      expect(vm.$el.classList.contains('shopee-form--label-right')).to.be.true;
      expect(vm.$el.querySelectorAll('.shopee-form-item').length).to.equals(7);
    });

    it('inline form', () => {
      vm = createSimpleForm({
        inline: true
      });
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      expect(vm.$el.classList.contains('shopee-form--inline')).to.be.true;
    });

    it('label position: left', () => {
      vm = createSimpleForm({
        labelPosition: 'left'
      });
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      expect(vm.$el.classList.contains('shopee-form--label-left')).to.be.true;
    });

    it('label position: top', () => {
      vm = createSimpleForm({
        labelPosition: 'top'
      });
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      expect(vm.$el.classList.contains('shopee-form--label-top')).to.be.true;
    });

    it('size: small', () => {
      vm = createSimpleForm({
        size: 'small'
      });
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--small')).to.be.true;
    });

    it('size: large', () => {
      vm = createSimpleForm({
        size: 'large'
      });
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--large')).to.be.true;
    });
  });

  describe('validate', () => {
    it('should validate correctly', done => {
      vm = createValidateForm();
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      vm.$refs.form.validate(({valid}) => {
        expect(valid).to.not.true;
        setTimeout(() => {
          expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.be.true;
          expect(vm.$el.querySelectorAll('.shopee-form-item__error').length).to.equals(2);
          done();
        }, 100);
      });
    });

    it('show message: false', done => {
      vm = createValidateForm({
        showMessage: false
      });
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      vm.$refs.form.validate(({valid}) => {
        expect(valid).to.not.true;
        setTimeout(() => {
          expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.be.true;
          expect(vm.$el.querySelector('.shopee-form-item__error')).to.not.exist;
          done();
        }, 100);
      });
    });

    it('validate trigger: blur', done => {
      vm = createValidateForm({
        validateTrigger: 'blur'
      });
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      vm.$el.querySelector('input').focus();
      setTimeout(() => {
        vm.$el.querySelector('input').blur();
        setTimeout(() => {
          expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.be.true;
          expect(vm.$el.querySelector('.shopee-form-item__error')).to.be.exist;
          done();
        }, 100);
      });
    });

    it('validate trigger: change', done => {
      vm = createValidateForm({
        validateTrigger: 'change'
      });
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      vm.$el.querySelector('input').focus();
      setTimeout(() => {
        vm.$el.querySelector('input').blur();
        setTimeout(() => {
          expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.not.true;
          expect(vm.$el.querySelector('.shopee-form-item__error')).to.not.exist;
          done();
        }, 100);
      });
    });

    it('clearValidate', done => {
      vm = createValidateForm();
      expect(vm.$el.classList.contains('shopee-form')).to.be.true;
      vm.$el.querySelector('input').focus();
      setTimeout(() => {
        vm.$el.querySelector('input').blur();
        setTimeout(() => {
          expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.be.true;
          vm.$refs.form.clearValidate();
          setTimeout(() => {
            expect(vm.$el.querySelector('.shopee-form-item').classList.contains('shopee-form-item--error')).to.not.true;
            done();
          }, 100);
        }, 100);
      });
    });

    it('validateFields', done => {
      vm = createValidateForm();
      vm.$refs.form.validateFields(['age'], valid => {
        expect(valid).to.not.true;
        setTimeout(() => {
          expect(vm.$refs.nameField.$el.classList.contains('shopee-form-item--error')).to.not.true;
          expect(vm.$refs.ageField.$el.classList.contains('shopee-form-item--error')).to.be.true;
          done();
        }, 100);
      });
    });

    it('clearValidateFields', done => {
      vm = createValidateForm();
      vm.$refs.form.validate(({valid}) => {
        expect(valid).to.not.true;
        setTimeout(() => {
          expect(vm.$refs.nameField.$el.classList.contains('shopee-form-item--error')).to.be.true;
          expect(vm.$refs.ageField.$el.classList.contains('shopee-form-item--error')).to.be.true;
          vm.$refs.form.clearValidateFields(['age']);
          setTimeout(() => {
            expect(vm.$refs.nameField.$el.classList.contains('shopee-form-item--error')).to.be.true;
            expect(vm.$refs.ageField.$el.classList.contains('shopee-form-item--error')).to.not.true;
            done();
          }, 100);
        }, 100);
      });
    });

    it('custom validate rule', done => {
      const checkName = (value) => {
        if (value.length < 5) {
          return new Error('length should more than 5');
        } else {
          return true;
        }
      };
      const checkAge = (value) => {
        return new Promise(resolve => {
          if (!Number.isInteger(value)) {
            resolve(new Error('Please enter a numeric value'));
          } else {
            resolve(true);
          }
        });
      };
      vm = createValidateForm({
        rules: {
          name: [
            { validator: checkName }
          ],
          age: [
            { validator: checkAge }
          ]
        }
      });
      vm.$refs.form.validate(({valid}) => {
        expect(valid).to.not.true;
        setTimeout(() => {
          expect(vm.$refs.nameField.errorMessage).to.equals('length should more than 5');
          expect(vm.$refs.ageField.errorMessage).to.equals('Please enter a numeric value');
          done();
        }, 100);
      });
    });

    // 一个item验证结果变化，不触发其他item的验证结果变化
    it('validate do not trigger each other in collective items', done => {
      vm = createCollectiveValidateForm(collectiveValidateRules);

      const nameField = vm.$refs.nameField[0];
      const nicknameField = vm.$refs.nicknameField[0];
      nameField.$el.querySelector('input').focus();
      setTimeout(() => {
        nameField.$el.querySelector('input').blur();
        setTimeout(() => {
          expect(nameField.$el.classList.contains('shopee-form-item--error')).to.be.true;
          expect(nicknameField.$el.classList.contains('shopee-form-item--error')).to.not.true;
          nicknameField.$el.querySelector('input').focus();
          setTimeout(() => {
            nicknameField.$el.querySelector('input').blur();
            setTimeout(() => {
              expect(nameField.$el.classList.contains('shopee-form-item--error')).to.be.true;
              expect(nicknameField.$el.classList.contains('shopee-form-item--error')).to.be.true;
              vm.$data.form.users[0].name = 'a';
              vm.$data.form.users[0].nickname = 'b';
              nameField.$el.querySelector('input').focus();
              setTimeout(() => {
                nameField.$el.querySelector('input').blur();
                setTimeout(() => {
                  expect(nameField.$el.classList.contains('shopee-form-item--error')).to.not.true;
                  expect(nicknameField.$el.classList.contains('shopee-form-item--error')).to.be.true;
                  nicknameField.$el.querySelector('input').focus();
                  setTimeout(() => {
                    nicknameField.$el.querySelector('input').blur();
                    setTimeout(() => {
                      expect(nameField.$el.classList.contains('shopee-form-item--error')).to.not.true;
                      expect(nicknameField.$el.classList.contains('shopee-form-item--error')).to.not.true;
                      done();
                    }, 100);
                  });
                }, 100);
              });
            }, 100);
          });
        }, 100);
      });
    });

    // form item之间验证有依赖，由于其他item变化导致当前item验证结果需变化的，form item validate方法需能触发结果改变
    it('should interdependent validation work correct: blur', done => {
      vm = createCollectiveValidateForm(collectiveValidateRules);

      vm.$data.form.users[0].name = 'abc';
      vm.$data.form.users[0].nickname = 'abc';
      const nameField = vm.$refs.nameField[0];
      const nicknameField = vm.$refs.nicknameField[0];
      setTimeout(() => {
        expect(nicknameField.errorMessage).to.equals('');
        nicknameField.$el.querySelector('input').focus();
        setTimeout(() => {
          nicknameField.$el.querySelector('input').blur();
          setTimeout(() => {
            expect(nicknameField.errorMessage).to.equals('Nickname can not be same');
            vm.$data.form.users[0].name = 'abcd';
            nameField.$el.querySelector('input').focus();
            setTimeout(() => {
              nameField.$el.querySelector('input').blur();
              setTimeout(() => {
                expect(nicknameField.errorMessage).to.equals('Nickname can not be same');
                nicknameField.$el.querySelector('input').focus();
                setTimeout(() => {
                  nicknameField.$el.querySelector('input').blur();
                  setTimeout(() => {
                    expect(nicknameField.errorMessage).to.equals('');
                    done();
                  }, 100);
                });
              }, 100);
            });
          }, 100);
        });
      }, 100);
    });

    // form item之间验证有依赖，由于其他item变化导致当前item验证结果需变化的，form validate方法需能触发结果改变
    it('should interdependent validation work correct: manual validate', done => {
      vm = createCollectiveValidateForm(collectiveValidateRules);

      vm.$data.form.users[0].name = 'abc';
      vm.$data.form.users[0].nickname = 'ab';
      const nicknameField = vm.$refs.nicknameField[0];
      vm.$refs.form.validate(({valid: valid1}) => {
        expect(valid1).to.be.true;
        setTimeout(() => {
          vm.$data.form.users[0].nickname = 'abc';
          setTimeout(() => {
            vm.$refs.form.validate(({valid: valid2}) => {
              expect(valid2).to.not.true;
              setTimeout(() => {
                expect(nicknameField.errorMessage).to.equals('Nickname can not be same');
                vm.$data.form.users[0].nickname = 'abcd';
                setTimeout(() => {
                  vm.$refs.form.validate(({valid: valid3}) => {
                    expect(valid3).to.be.true;
                    setTimeout(() => {
                      expect(nicknameField.errorMessage).to.equals('');
                      done();
                    }, 100);
                  });
                });
              }, 100);
            });
          });
        }, 100);
      });
    });

    // students 内部验证结果变化，不触发students的验证结果变化
    it('should not trigger parent\'s validation when all children trigger error in collective form', done => {
      vm = createCollectiveValidateForm({
        users: [
          { minLength: minLength(2), message: 'required 2 at lease' },
          {
            $each: {
              name: [
                { required, message: 'Please input name', trigger: 'blur' }
              ],
              nickname: [
                { required, message: 'Please input nickname', trigger: 'blur' }
              ]
            }
          }
        ]
      });

      const nameField = vm.$refs.nameField[0];
      const nicknameField = vm.$refs.nicknameField[0];
      const usersField = vm.$refs.usersField;
      nameField.$el.querySelector('input').focus();
      setTimeout(() => {
        nameField.$el.querySelector('input').blur();
        setTimeout(() => {
          expect(nameField.$el.classList.contains('shopee-form-item--error')).to.be.true;
          expect(usersField.$el.classList.contains('shopee-form-item--error')).to.not.true;
          nicknameField.$el.querySelector('input').focus();
          setTimeout(() => {
            nicknameField.$el.querySelector('input').blur();
            setTimeout(() => {
              expect(nicknameField.$el.classList.contains('shopee-form-item--error')).to.be.true;
              expect(usersField.$el.classList.contains('shopee-form-item--error')).to.not.true;
              vm.$refs.form.validate(({valid}) => {
                expect(valid).to.not.true;
                setTimeout(() => {
                  expect(nameField.$el.classList.contains('shopee-form-item--error')).to.be.true;
                  expect(nicknameField.$el.classList.contains('shopee-form-item--error')).to.be.true;
                  expect(usersField.$el.classList.contains('shopee-form-item--error')).to.be.true;
                  done();
                }, 100);
              });
            }, 100);
          });
        }, 100);
      });
    });
  });
});
