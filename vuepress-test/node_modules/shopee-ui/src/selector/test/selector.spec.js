import Vue from 'vue';
import { Selector as ShopeeSelector } from '../index';
import { createElement, createInstance, destroyInstance } from '@/test/utils';

ShopeeSelector.install = function (Vue) {
  Vue.component(ShopeeSelector.name, ShopeeSelector);
};

Vue.use(ShopeeSelector);

const createSelector = (props = {}) => {
  const vm = new Vue({
    template: `
      <div ref="selectorRef">
        <shopee-selector ref="selector" v-bind="props" @click="emitClick" @clear="emitClear">
        </shopee-selector>
      </div>`,
    data() {
      return {
        clicked: false,
        cleared: false,
        props
      };
    },
    methods: {
      emitClick() {
        this.clicked = true;
      },
      emitClear() {
        this.cleared = true;
      }
    }
  }).$mount(createElement());
  return vm;
};

describe('popper.vue', () => {
  let vm;
  afterEach(() => {
    destroyInstance(vm);
  });

  it('should render correct', () => {
    vm = createInstance(ShopeeSelector);
    expect(vm.$el.classList.contains('shopee-selector')).to.be.true;
  });

  it('should render clearable correct', () => {
    vm = createInstance(ShopeeSelector,{
      clearable: true
    });
    expect(!!vm.$el.querySelector('.shopee-selector__clear-btn')).to.be.true;
  });

  it('should render placeholder correct', () => {
    vm = createInstance(ShopeeSelector,{
      placeholder: 'test'
    });
    expect(vm.$el.querySelector('.shopee-selector__inner').innerHTML.trim()).to.equal('test');
  });

  it('should render size correct', () => {
    vm = createInstance(ShopeeSelector,{
      size: 'large'
    });
    expect(vm.$el.classList.contains('shopee-selector--large')).to.be.true;
  });

  it('should render maxLine correct', () => {
    vm = createInstance(ShopeeSelector,{
      maxLine: 2
    });
    expect(!!vm.$el.querySelector('.line-clamp--2')).to.be.true;
  });

  it('should render disabled correct', () => {
    vm = createInstance(ShopeeSelector,{
      disabled: true
    });
    expect(!!vm.$el.classList.contains('disabled')).to.be.true;
  });

  it('should watch value correct', (done) => {
    vm = createSelector({
      value: ''
    });
    const selector = vm.$refs.selector;
    expect(selector.currentValue).to.equals('');
    vm.props.value = 'test';
    setTimeout(() => {
      expect(selector.currentValue).to.equals('test');
      done();
    });
  });

  it('should handle click correct', (done) => {
    vm = createSelector();
    vm.$refs.selector.handlerClick();
    setTimeout(() => {
      expect(vm.clicked).to.be.true;
      done();
    });
  });


  it('should handle clear correct', (done) => {
    vm = createSelector();
    vm.$refs.selector.handleClear();
    setTimeout(() => {
      expect(vm.cleared).to.be.true;
      done();
    });
  });

  it('should handle focus correct', () => {
    vm = createSelector();
    vm.$refs.selector.handleFocus();
    expect(vm.$refs.selector.focused).to.be.true;
    vm.$refs.selector.handleBlur();
    expect(vm.$refs.selector.focused).to.be.false;
  });
});
