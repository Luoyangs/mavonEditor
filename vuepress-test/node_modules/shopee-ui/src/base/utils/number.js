/**
 * decimal number addition, the precision of return equire the max of the inputs
 * @param num
 * @param ...nums
 * @returns {Number} the addition result of input numbers
 */
export function addDecimalNumber(num, ...nums) {
  if (!nums.length) {
    return num;
  }
  const numN = nums.shift();
  let m; let n;
  try {
    m = num.toString().split('.')[1].length;
  } catch (e) {
    m = 0;
  }
  try {
    n = numN.toString().split('.')[1].length;
  } catch (e) {
    n = 0;
  }
  num = Number((Number(num) + Number(numN)).toFixed(Math.max(m, n)));
  return addDecimalNumber(num, ...nums);
}

/**
 * 直接截取value到指定的精度
 * @param {number} value
 * @param {number} precision
 */
export function valueToFixed(value, precision) {
  // 是否是正数
  const isPositive = (+value) >= 0;
  // 转成字符串
  value += '';
  // 去掉正负号，统一按照正数来处理，最后再加上符号
  value = value.replace(/^(?:-|\+)/gi, '');

  // 小数点过大
  if (precision > 20 || precision < 0) {
    throw new RangeError('toFixed() digits argument must be between 0 and 20');
  }

  // 如果是简写如.11则整数位补0，变成0.11
  if (/^\./gi.test(value)) {
    value = '0' + value;
  }

  // 非数字
  if (!/^\d+\.?\d*$/gi.test(value)) {
    return (isPositive || value === '') ? '' : '-';
  }

  const values = value.split('.');
  let result = '';

  // 在str后面加n个0
  const paddingZero = function (str, n) {
    for (var i = 0; i < n; i++) {
      str += '0';
    }
    return str;
  };

  // 在str后面加0，直至str的长度达到n
  // 如果超过了n，则直接截取前n个字符串
  const paddingZeroTo = function (str, n) {
    if (str.length >= n) {
      return str.substr(0, n);
    } else {
      return paddingZero(str, n - str.length);
    }
  };

  // 直接就是整数
  if (values.length < 2) {
    result = values[0] + '.' + paddingZero('', precision);
  } else {
    result = values[0] + '.' + paddingZeroTo(values[1], precision);
  }

  // 如果最后一位为.,则去除
  result = result.replace(/\.$/gi, '').replace(/^\./gi, '0.');

  // 加上符号位
  return isPositive ? result : '-' + result;
}
