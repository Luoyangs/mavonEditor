import { mergeDeep } from './helper';

const COMPLETE = 'complete';
const CANCELED = 'canceled';

function raf(task) {
  if ('requestAnimationFrame' in window) {
    return window.requestAnimationFrame(task);
  }
  setTimeout(task, 16);
}

function setElementScroll(element, x, y) {
  if (element.self === element) {
    element.scrollTo(x, y);
  } else {
    element.scrollLeft = x;
    element.scrollTop = y;
  }
}

function getTargetScrollLocation(scrollSettings, parent) {
  const { align, target } = scrollSettings;
  const targetPosition = target.getBoundingClientRect();
  let parentPosition = {};
  let x;
  let y;
  let differenceX;
  let differenceY;
  let targetWidth;
  let targetHeight;
  const leftAlign = align && align.left != null ? align.left : 0.5;
  const topAlign = align && align.top != null ? align.top : 0.5;
  const leftOffset = align && align.leftOffset != null ? align.leftOffset : 0;
  const topOffset = align && align.topOffset != null ? align.topOffset : 0;
  const leftScalar = leftAlign;
  const topScalar = topAlign;

  if (scrollSettings.isWindow(parent)) {
    targetWidth = Math.min(targetPosition.width, parent.innerWidth);
    targetHeight = Math.min(targetPosition.height, parent.innerHeight);
    x = targetPosition.left + parent.pageXOffset - parent.innerWidth * leftScalar + targetWidth * leftScalar;
    y = targetPosition.top + parent.pageYOffset - parent.innerHeight * topScalar + targetHeight * topScalar;
    x -= leftOffset;
    y -= topOffset;
    differenceX = x - parent.pageXOffset;
    differenceY = y - parent.pageYOffset;
  } else {
    targetWidth = targetPosition.width;
    targetHeight = targetPosition.height;
    parentPosition = parent.getBoundingClientRect();
    const offsetLeft = targetPosition.left - (parentPosition.left - parent.scrollLeft);
    const offsetTop = targetPosition.top - (parentPosition.top - parent.scrollTop);
    x = offsetLeft + (targetWidth * leftScalar) - parent.clientWidth * leftScalar;
    y = offsetTop + (targetHeight * topScalar) - parent.clientHeight * topScalar;
    x -= leftOffset;
    y -= topOffset;
    x = Math.max(Math.min(x, parent.scrollWidth - parent.clientWidth), 0);
    y = Math.max(Math.min(y, parent.scrollHeight - parent.clientHeight), 0);
    differenceX = x - parent.scrollLeft;
    differenceY = y - parent.scrollTop;
  }

  return {
    x,
    y,
    differenceX,
    differenceY
  };
}

function animate(parent) {
  const scrollSettings = parent._scrollSettings;

  if (!scrollSettings) {
    return;
  }

  const { maxSynchronousAlignments } = scrollSettings;
  const location = getTargetScrollLocation(scrollSettings, parent);
  const time = Date.now() - scrollSettings.startTime;
  const timeValue = Math.min(1 / scrollSettings.time * time, 1);

  if (scrollSettings.endIterations >= maxSynchronousAlignments) {
    setElementScroll(parent, location.x, location.y);
    parent._scrollSettings = null;
    return scrollSettings.end(COMPLETE);
  }

  const easeValue = 1 - scrollSettings.ease(timeValue);

  setElementScroll(parent,
    location.x - location.differenceX * easeValue,
    location.y - location.differenceY * easeValue
  );

  if (time >= scrollSettings.time) {
    scrollSettings.endIterations++;
    return animate(parent);
  }
  raf(animate.bind(null, parent));
}

function defaultIsWindow(target) {
  return target.self === target;
}

function transitionScrollTo(target, parent, settings, callback) {
  const idle = !parent._scrollSettings;
  const lastSettings = parent._scrollSettings;
  const now = Date.now();
  let cancelHandler = null;
  const passiveOptions = { passive: true };
  let { maxSynchronousAlignments } = settings;
  if (maxSynchronousAlignments == null) {
    maxSynchronousAlignments = 3;
  }

  if (lastSettings) {
    lastSettings.end(CANCELED);
  }

  function end(endType) {
    parent._scrollSettings = null;
    if (parent.parentElement && parent.parentElement._scrollSettings) {
      parent.parentElement._scrollSettings.end(endType);
    }
    callback(endType);
    if (cancelHandler) {
      parent.removeEventListener('touchstart', cancelHandler, passiveOptions);
      parent.removeEventListener('wheel', cancelHandler, passiveOptions);
    }
  }

  parent._scrollSettings = {
    startTime: now,
    endIterations: 0,
    target,
    time: settings.time,
    ease: settings.ease,
    align: settings.align,
    isWindow: settings.isWindow || defaultIsWindow,
    maxSynchronousAlignments,
    end
  };

  if (!('cancellable' in settings) || settings.cancellable) {
    cancelHandler = end.bind(null, CANCELED);
    parent.addEventListener('touchstart', cancelHandler, passiveOptions);
    parent.addEventListener('wheel', cancelHandler, passiveOptions);
  }

  if (idle) {
    animate(parent);
  }

  return cancelHandler;
}

function defaultIsScrollable(element) {
  return (
    'pageXOffset' in element ||
    (
      element.scrollHeight !== element.clientHeight ||
      element.scrollWidth !== element.clientWidth
    ) &&
    getComputedStyle(element).overflow !== 'hidden'
  );
}

function defaultValidTarget() {
  return true;
}

function findParentElement(el) {
  if (el.assignedSlot) {
    return findParentElement(el.assignedSlot);
  }

  if (el.parentElement) {
    if (el.parentElement.tagName === 'BODY') {
      return el.parentElement.ownerDocument.defaultView || el.parentElement.ownerDocument.ownerWindow;
    }
    return el.parentElement;
  }

  if (el.getRootNode) {
    const parent = el.getRootNode();
    if (parent.nodeType === 11) {
      return parent.host;
    }
  }
}

export function scrollToView(target, userSettings, callback) {
  if (!target) {
    return;
  }

  if (typeof userSettings === 'function') {
    callback = userSettings;
    userSettings = null;
  }

  if (!userSettings) {
    userSettings = {};
  }

  let settings = {
    align: {
      left: 0,
      top: 0,
      topOffset: 0,
      leftOffset: 0
    }
  };
  mergeDeep(settings, userSettings);

  settings.time = isNaN(settings.time) ? 500 : settings.time;
  settings.ease = settings.ease || ((v) => {
    return 1 - Math.pow(1 - v, v / 2);
  });

  let parent = findParentElement(target);
  let parents = 1;

  function done(endType) {
    parents--;
    if (!parents) {
      callback && callback(endType);
    }
  }

  const validTarget = settings.validTarget || defaultValidTarget;
  const isScrollable = settings.isScrollable;

  let cancel = null;

  while (parent) {
    if (validTarget(parent, parents) && (isScrollable ? isScrollable(parent, defaultIsScrollable) : defaultIsScrollable(parent))) {
      parents++;
      cancel = transitionScrollTo(target, parent, settings, done);
    }
    parent = findParentElement(parent);

    if (!parent) {
      done(COMPLETE);
      break;
    }
  }
  return cancel;
}
